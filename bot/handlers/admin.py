import asyncio
from threading import Thread
from telebot import types
from bot.core import bot
from bot.handlers.commands import is_admin
from bot.utils.api import (
    api_get_users, api_get_users_page_peek, api_update_user
)
from bot.utils.notifications import send_notification_progressively, handle_mass_notification

@bot.callback_query_handler(func=lambda call: call.data.startswith("notify_all:") or call.data.startswith("skip_notify:"))
def _notify_callback(call):
    handle_mass_notification(call)

def render_admin_panel(chat_id: int, message_id: int | None = None):
    text = "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"))
    kb.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    kb.add(types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_broadcast"))
    kb.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_refresh"))
    kb.add(types.InlineKeyboardButton("üîî –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤", callback_data="admin_refresh_bell"))
    if message_id:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=kb)
    else:
        bot.send_message(chat_id, text, reply_markup=kb)

@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = int(message.from_user.id)
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    render_admin_panel(user_id)
    
@bot.callback_query_handler(func=lambda call: call.data == "admin_broadcast")
def admin_broadcast(call):
    """–ê–¥–º–∏–Ω –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    bot.answer_callback_query(call.id)
    msg = bot.send_message(
        user_id,
        "üì£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–¥.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª."
    )
    bot.register_next_step_handler(msg, process_admin_broadcast)
    
@bot.callback_query_handler(func=lambda call: call.data == "admin_refresh_bell")
def admin_refresh_bell(call):
    """–ê–¥–º–∏–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"""
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    bot.answer_callback_query(call.id, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–≤–æ–Ω–∫–æ–≤")
    msg = bot.send_message(
        user_id,
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª `bell_schedule.json` –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ.\n"
        "–û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–∏–º–µ–Ω—ë–Ω –∫–æ –≤—Å–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º."
    )
    bot.register_next_step_handler(msg, process_bell_schedule_upload)

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def admin_callback_handler(call):
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    if call.data.startswith("admin_users"):
        try: bot.answer_callback_query(call.id)
        except: pass

        parts = call.data.split(":")
        skip = int(parts[1]) if len(parts) > 1 else 0
        limit = int(parts[2]) if len(parts) > 2 else 10
        show_user_management(call, skip=skip, limit=limit)
        return

    if call.data == "admin_users":
        show_user_management(call)
        bot.answer_callback_query(call.id)
    elif call.data == "admin_stats":
        show_admin_stats(call)
        bot.answer_callback_query(call.id)
    elif call.data == "admin_refresh":
        bot.answer_callback_query(call.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX-—Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
        bot.send_message(user_id, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX-—Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –°–ª–µ–¥–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Å–æ —Å–º–µ–Ω–∞–º–∏ `group_shifts.json`. –Ø –∑–∞–≥—Ä—É–∂—É –æ–±–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    elif call.data == "admin_panel":
        render_admin_panel(user_id, message_id=call.message.message_id)
        bot.answer_callback_query(call.id)
    elif call.data == "admin_set_teacher":
        set_teacher_callback(call)
        bot.answer_callback_query(call.id)
    elif call.data == "admin_back":
        render_admin_panel(user_id, message_id=call.message.message_id)
        bot.answer_callback_query(call.id)
    
def process_admin_broadcast(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ notifications.send_notification_progressively"""
    from bot.utils.notifications import send_notification_progressively
    from bot.utils.api import api_get_users
    from bot.handlers.admin import render_admin_panel

    admin_id = message.from_user.id

    if message.text and message.text.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel"):
        bot.send_message(admin_id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        render_admin_panel(admin_id)
        return

    users = api_get_users()
    Thread(
        target=send_notification_progressively,
        args=(bot, users, message, admin_id, "manual_broadcast"),
    ).start()

def process_bell_schedule_upload(message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ API /bell/upload"""
    user_id = message.from_user.id

    if message.content_type != "document":
        bot.send_message(user_id, "‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ –∏–º–µ–Ω–Ω–æ JSON-—Ñ–∞–π–ª.")
        render_admin_panel(user_id)
        return

    try:
        file_info = bot.get_file(message.document.file_id)
        file_bytes = bot.download_file(file_info.file_path)
        fname = message.document.file_name.lower()

        if not fname.endswith(".json"):
            bot.send_message(user_id, "‚ùå –≠—Ç–æ –Ω–µ JSON-—Ñ–∞–π–ª.")
            render_admin_panel(user_id)
            return

        bot.send_message(user_id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")

        from bot.utils.api import api_upload_bell_schedule
        resp = api_upload_bell_schedule(file_bytes)

        if resp:
            msg_text = f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            msg_text += "üì£ –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö –∑–≤–æ–Ω–∫–∞—Ö?"

            kb = types.InlineKeyboardMarkup()
            kb.add(
                types.InlineKeyboardButton("‚úÖ –î–∞, —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö", callback_data="notify_all:bell"),
                types.InlineKeyboardButton("üö´ –ù–µ—Ç, –Ω–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å", callback_data="skip_notify:bell")
            )
            bot.send_message(user_id, msg_text, reply_markup=kb)
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤.")
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    finally:
        pass  # –ü–∞–Ω–µ–ª—å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É ‚Äî –∂–¥—ë–º —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    
@bot.callback_query_handler(func=lambda call: call.data.startswith("notify_all:") or call.data.startswith("skip_notify:"))
def handle_mass_notification(call):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∑–≤–æ–Ω–∫–∏ –∏ —Ç.–¥.)
    –ü—Ä–∏–º–µ—Ä callback_data:
      notify_all:bell   ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –æ –∑–≤–æ–Ω–∫–∞—Ö
      notify_all:schedule ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
      skip_notify:bell  ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        return

    parts = call.data.split(":")
    action = parts[0]  # notify_all / skip_notify
    context_name = parts[1] if len(parts) > 1 else "update"

    if action == "skip_notify":
        bot.answer_callback_query(call.id, "‚è∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
        bot.send_message(user_id, f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ '{context_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        render_admin_panel(user_id)
        return

    bot.answer_callback_query(call.id, f"üì¢ –ù–∞—á–∏–Ω–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ({context_name})...")
    from bot.utils.api import api_get_users
    users = api_get_users()

    # —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if context_name == "bell":
        msg_text = "üîî –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤!"
    elif context_name == "schedule":
        msg_text = "üìö –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π!"
    else:
        msg_text = "üì¢ –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ!"

    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=send_notification_progressively, args=(bot, users, msg_text, user_id, context_name)).start()

def show_user_management(call, skip: int = 0, limit: int = 10):
    user_id = call.from_user.id
    message_id = call.message.message_id

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    skip = max(0, int(skip))
    limit = max(1, int(limit))

    # 1) –∑–∞–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ 1000 —Å –±—ç–∫–∞)
    all_users = api_get_users()  # [ {user_id, username, role, ...}, ... ]
    # 2) —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫: –Ω–æ–≤—ã–µ -> –ø–µ—Ä–≤—ã–µ
    users_desc = list(reversed(all_users))

    total = len(users_desc)
    if total == 0:
        users_desc = []
    # –ø–æ–ø—Ä–∞–≤–ª—è–µ–º skip, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if skip >= total:
        skip = max(0, total - (total % limit or limit))

    # 3) —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    page_rows = users_desc[skip: skip + limit]

    from config import ROLES
    users_info = []
    for u in page_rows:
        uid = u.get('user_id')
        uname = u.get('username')
        role = u.get('role', 'student')
        grp = u.get('group_name') or '–Ω–µ—Ç –≥—Ä—É–ø–ø—ã'
        line = f"@{uname}, {uid}: {ROLES.get(role, role)}"
        if role == 'student':
            line += f", –≥—Ä—É–ø–ø–∞: {grp}"
        fio = u.get('teacher_fio')
        if fio:
            line += f", –§–ò–û: {fio}"
        users_info.append(line)

    page_num = (skip // limit) + 1
    users_text = "\n".join(users_info) if users_info else "‚Äî"

    text = (
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_num}\n"
        f"–ü–æ–∫–∞–∑–∞–Ω–æ: {len(page_rows)} –∏–∑ {total}\n\n"
        f"{users_text}"
    )

    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    from telebot import types
    kb = types.InlineKeyboardMarkup(row_width=3)
    has_prev = skip > 0
    has_next = (skip + limit) < total
    nav_buttons = []
    if has_prev:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"admin_users:{skip - limit}:{limit}"))
    if has_next:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"admin_users:{skip + limit}:{limit}"))
    if nav_buttons:
        kb.add(*nav_buttons)

    kb.add(types.InlineKeyboardButton("üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="admin_set_teacher"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))

    try:
        bot.edit_message_text(text, user_id, message_id, reply_markup=kb)
    except Exception as e:
        if "message is not modified" not in str(e):
            raise

def show_admin_stats(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    users = api_get_users()
    total = len(users)
    students = sum(1 for u in users if u.get('role') == 'student')
    teachers = sum(1 for u in users if u.get('role') == 'teacher')
    admins = sum(1 for u in users if u.get('role') == 'admin')
    groups = len({u.get('group_name') for u in users if u.get('group_name')})
    subs = sum(1 for u in users if u.get('schedule_enabled'))

    stats_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
                  f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
                  f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {students}\n"
                  f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {teachers}\n"
                  f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins}\n"
                  f"üìö –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {groups}\n"
                  f"üîî –ü–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {subs}")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
    bot.edit_message_text(stats_text, user_id, message_id, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "admin_set_teacher")
def set_teacher_callback(call):
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    msg = bot.send_message(
        user_id,
        "üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª."
    )
    bot.register_next_step_handler(msg, process_teacher_appointment)

def process_teacher_appointment(message):
    admin_id = message.from_user.id
    from bot.utils.api import api_update_user, api_get_users
    text = message.text.strip()

    if text.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "–Ω–∞–∑–∞–¥"):
        bot.send_message(admin_id, "‚õîÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        render_admin_panel(admin_id)
        return

    import re
    raw_ids = re.split(r'[\,\s]+', text)
    ok, fail = [], []

    for token in raw_ids:
        if not token:
            continue
        try:
            uid = int(token)
            updated = api_update_user(uid, {"role": "teacher"})
            if updated:
                ok.append(uid)
                try:
                    bot.send_message(
                        uid,
                        "üéâ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è!\n"
                        "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    )
                except:
                    pass
            else:
                fail.append(token)
        except:
            fail.append(token)

    if ok:
        bot.send_message(admin_id, f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏: {', '.join(map(str, ok))}")
    if fail:
        bot.send_message(admin_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {', '.join(fail)}")

    render_admin_panel(admin_id)