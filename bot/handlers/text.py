from telebot import types
from bot.core import bot
from bot.handlers.commands import is_teacher, is_admin, render_settings_panel
from bot.utils.api import (
    api_get_user, api_get_users, api_update_user, api_get_schedule, api_upload_schedule, api_get_all_groups, api_get_teacher_schedule
)
from bot.utils.schedule_utils import (
    get_current_day, get_tomorrow_day, format_schedule_for_day, format_teacher_schedule_for_day
)
from bot.utils.fio_utils import fio_full_to_initials
from bot.keyboards import create_main_keyboard

pending_uploads = {}  # user_id ‚Üí {"docx": bytes, "json": bytes}

@bot.message_handler(func=lambda message: True, content_types=['text', 'document'])
def text_message_handler(message):
    user_id = int(message.from_user.id)

    if message.content_type == 'document':
        user = api_get_user(user_id) or {}
        if user.get('role') != 'admin':
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.")
            return
        file_info = bot.get_file(message.document.file_id)
        file_bytes = bot.download_file(file_info.file_path)
        fname = (message.document.file_name or '').lower()

        if user_id not in pending_uploads:
            pending_uploads[user_id] = {}

        if fname.endswith('.json'):
            try:
                import json
                json.loads(file_bytes.decode('utf-8'))
                pending_uploads[user_id]['json'] = file_bytes
                if 'docx' in pending_uploads[user_id]:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞"))
                    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                    bot.send_message(
                        user_id,
                        "üìÇ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã!\n–ù–∞–∂–º–∏—Ç–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
                        reply_markup=markup
                    )
                else:
                    bot.send_message(user_id, "‚úÖ JSON –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX.")
            except Exception:
                bot.send_message(user_id, "‚ùå JSON –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        elif fname.endswith('.docx'):
            pending_uploads[user_id]['docx'] = file_bytes
            if 'json' in pending_uploads[user_id]:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞"))
                markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                bot.send_message(
                    user_id,
                    "üìÇ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã!\n–ù–∞–∂–º–∏—Ç–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
                    reply_markup=markup
                )
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
                markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                bot.send_message(
                    user_id,
                    "‚úÖ DOCX –ø–æ–ª—É—á–µ–Ω.\n"
                    "(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Å–æ —Å–º–µ–Ω–∞–º–∏, "
                    "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ DOCX.",
                    reply_markup=markup
                )
            return

        data = pending_uploads[user_id]
        if 'docx' in data and 'json' in data:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞"))
            markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            bot.send_message(
                user_id,
                "üìÇ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã!\n–ù–∞–∂–º–∏—Ç–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
                reply_markup=markup
            )
        return

    text = (message.text or '').strip()

    if text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" and is_admin(user_id):
        api_update_user(user_id, {"group_name": "–ê–¥–º–∏–Ω"})
        keyboard = create_main_keyboard(user_id, is_teacher=is_teacher(user_id), is_admin=is_admin(user_id))
        bot.send_message(
            user_id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "üëë –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
            reply_markup=keyboard
        )
        return

    if text in set(api_get_all_groups()):
        if is_teacher(user_id):
            group_name = text
            sch = api_get_schedule(group_name)
            schedule_text = format_schedule_for_day(group_name, sch or {}, get_current_day() or "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
            bot.send_message(user_id, schedule_text)
            return
        api_update_user(user_id, {'role': 'student', 'group_name': text})
        keyboard = create_main_keyboard(user_id, is_teacher=False, is_admin=is_admin(user_id))
        bot.send_message(
            user_id,
            f"‚úÖ –ì—Ä—É–ø–ø–∞ {text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–°–µ–≥–æ–¥–Ω—è' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            f"/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            reply_markup=keyboard
        )
        return

    if text == "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and is_admin(user_id):
        from bot.handlers.admin import admin_command
        admin_command(message)
        return
    if text == "üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" and is_teacher(user_id):
        from bot.handlers.teachers import teacher_command
        teacher_command(message)
        return

    if text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        if is_teacher(user_id):
            teacher_fio = (api_get_user(user_id) or {}).get('teacher_fio')
            today = get_current_day()
            fio_key = fio_full_to_initials(teacher_fio or '')
            if not today:
                tomorrow = get_tomorrow_day()
                if tomorrow:
                    sch = api_get_schedule((api_get_user(user_id) or {}).get('group_name',''))
                    t = format_teacher_schedule_for_day(teacher_fio or '', api_get_teacher_schedule(fio_key) or {}, tomorrow)
                    bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{t}")
                else:
                    bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
            else:
                sch = api_get_teacher_schedule(fio_key)
                t = format_teacher_schedule_for_day(teacher_fio or '', sch or {}, today)
                bot.send_message(user_id, t)
            return
        group_name = (api_get_user(user_id) or {}).get('group_name')
        if not group_name:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
        today = get_current_day()
        if not today:
            tomorrow = get_tomorrow_day()
            if tomorrow:
                sch = api_get_schedule(group_name)
                schedule_text = format_schedule_for_day(group_name, sch or {}, tomorrow)
                bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{schedule_text}")
            else:
                bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
        else:
            sch = api_get_schedule(group_name)
            schedule_text = format_schedule_for_day(group_name, sch or {}, today)
            bot.send_message(user_id, schedule_text, protect_content=True)
        return

    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        render_settings_panel(message.from_user.id)
        return

    if text in ["üìÖ –ü–ù", "üìÖ –í–¢", "üìÖ –°–†", "üìÖ –ß–¢", "üìÖ –ü–¢", "üìÖ –°–ë"]:
        day_map = {
            "üìÖ –ü–ù": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "üìÖ –í–¢": "–í—Ç–æ—Ä–Ω–∏–∫",
            "üìÖ –°–†": "–°—Ä–µ–¥–∞",
            "üìÖ –ß–¢": "–ß–µ—Ç–≤–µ—Ä–≥",
            "üìÖ –ü–¢": "–ü—è—Ç–Ω–∏—Ü–∞",
            "üìÖ –°–ë": "–°—É–±–±–æ—Ç–∞"
        }
        day = day_map[text]
        if is_teacher(user_id):
            teacher_fio = (api_get_user(user_id) or {}).get('teacher_fio')
            fio_key = fio_full_to_initials(teacher_fio or '')
            sch = api_get_teacher_schedule(fio_key)
            t = format_teacher_schedule_for_day(teacher_fio or '', sch or {}, day)
            bot.send_message(user_id, t)
            return
        group_name = (api_get_user(user_id) or {}).get('group_name')
        if not group_name:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
        sch = api_get_schedule(group_name)
        schedule_text = format_schedule_for_day(group_name, sch or {}, day)
        bot.send_message(user_id, schedule_text, protect_content=True)
        return

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        pending_uploads.pop(user_id, None)
        group_name = (api_get_user(user_id) or {}).get('group_name')
        if group_name:
            keyboard = create_main_keyboard(user_id, is_teacher=is_teacher(user_id), is_admin=is_admin(user_id))
            bot.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
        else:
            bot.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")
        return
    
    if text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        data = pending_uploads.get(user_id)
        if not data or 'docx' not in data:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX-—Ñ–∞–π–ª.")
            return

        bot.send_message(user_id, "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")

        resp = api_upload_schedule(data['docx'], None)
        pending_uploads.pop(user_id, None)

        keyboard = create_main_keyboard(user_id, is_teacher=is_teacher(user_id), is_admin=is_admin(user_id))

        if resp is not None:
            bot.send_message(user_id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=keyboard)
            users = api_get_users()
            for u in users:
                try:
                    bot.send_message(u["user_id"], "üì¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ—Ç–µ.")
                except Exception:
                    pass
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=keyboard)
        return
    
    if text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞":
        data = pending_uploads.get(user_id)
        if not data or 'docx' not in data:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX –∏ JSON —Ñ–∞–π–ª—ã.")
            return

        bot.send_message(user_id, "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")

        resp = api_upload_schedule(data['docx'], data.get('json'))
        pending_uploads.pop(user_id, None)

        keyboard = create_main_keyboard(user_id, is_teacher=is_teacher(user_id), is_admin=is_admin(user_id))

        if resp is not None:
            bot.send_message(user_id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=keyboard)
            users = api_get_users()
            for u in users:
                uid = u.get("user_id")
                try:
                    bot.send_message(uid, "üì¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
                except Exception:
                    pass
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=keyboard)
        return

    bot.send_message(
        user_id,
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    )

def process_change_time(message):
    user_id = int(message.from_user.id)
    text = message.text.strip()
    import re
    if not re.match(r'^\d{2}:\d{2}$', text):
        msg = bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:00.")
        bot.register_next_step_handler(msg, process_change_time)
        return
    hh, mm = text.split(':')
    try:
        hh_i, mm_i = int(hh), int(mm)
        if not (0 <= hh_i < 24 and 0 <= mm_i < 60):
            raise ValueError
    except:
        msg = bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:00.")
        bot.register_next_step_handler(msg, process_change_time)
        return
    api_update_user(user_id, {"schedule_time": text})
    bot.send_message(user_id, f"‚úÖ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {text}")
    render_settings_panel(user_id)