from telebot import types
from config import ADMINS
from bot.core import bot
from bot.keyboards import create_main_keyboard, group_selection_keyboard
from bot.messages import welcome_text, settings_text
from bot.utils.api import (
    api_get_user, api_update_user, api_create_user, api_get_schedule,
    api_get_teacher_schedule
)
from bot.utils.schedule_utils import (
    get_current_day, get_tomorrow_day, format_schedule_for_day, format_teacher_schedule_for_day
)
from bot.utils.fio_utils import fio_full_to_initials, normalize_full_fio, is_valid_full_fio

def is_admin(user_id: int) -> bool:
    u = api_get_user(user_id) or {}
    role = u.get('role', 'student')
    if user_id in ADMINS and role != 'admin':
        api_update_user(user_id, {"role": "admin"})
        role = 'admin'
    return role == 'admin'

def is_teacher(user_id: int) -> bool:
    u = api_get_user(user_id) or {}
    role = u.get('role', 'student')
    if user_id in ADMINS and role != 'admin':
        api_update_user(user_id, {"role": "admin"})
        role = 'admin'
    return role in ['teacher', 'admin']

def send_group_selection(user_id: int):
    kb = group_selection_keyboard(is_admin(user_id), is_teacher(user_id))
    bot.send_message(user_id, welcome_text(is_admin(user_id), is_teacher(user_id)), reply_markup=kb)

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = int(message.from_user.id)
    user = api_get_user(user_id)
    username = message.from_user.username or ""
    if user and user.get("username") != username:
        api_update_user(user_id, {"username": username})

    if not user:
        role = 'admin' if user_id in ADMINS else 'student'
        user = api_create_user(user_id, role=role, username=username)

    if not user:
        bot.send_message(user_id, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if user_id in ADMINS and user.get('role') != 'admin':
        user = api_update_user(user_id, {"role": "admin"}) or user

    user_role = user.get('role', 'student')
    teacher_fio = user.get('teacher_fio')

    if user_role in ('teacher', 'admin') and not teacher_fio:
        msg = bot.send_message(
            user_id,
            "üë®‚Äçüè´ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_teacher_name)
        return

    if user_role in ('teacher', 'admin') and teacher_fio:
        api_update_user(user_id, {"group_name": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"})
        keyboard = create_main_keyboard(user_id, is_teacher=True, is_admin=is_admin(user_id))
        bot.send_message(
            user_id,
            f"üë®‚Äçüè´ *–ú—ã –≤–∞—Å –≤—Å–µ –µ—â–µ –ø–æ–º–Ω–∏–º, {teacher_fio}!*\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        return

    if not user.get('group_name'):
        send_group_selection(user_id)
        return

    keyboard = create_main_keyboard(user_id, is_teacher=False, is_admin=is_admin(user_id))
    bot.send_message(
        user_id,
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –°–∞–ª–∞–≤–∞—Ç—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞\n\n"
        f"üìö –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {user.get('group_name')}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
        reply_markup=keyboard
    )

@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    user_id = message.from_user.id
    msg = bot.send_message(
        user_id,
        "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤. "
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª."
    )
    bot.register_next_step_handler(msg, process_feedback)
    

def process_feedback(message):
    user_id = message.from_user.id
    text = message.text.strip()

    if text.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel"):
        bot.send_message(user_id, "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ñ–∏–¥–±–µ–∫–∞
    feedback_msg = (
        f"üì© <b>–ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üßë‚Äçüíª <b>ID:</b> {user_id}\n"
        f"üë§ <b>Username:</b> @{message.from_user.username or '–Ω–µ—Ç'}\n\n"
        f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    from config import ADMINS
    for admin_id in ADMINS:
        try:
            bot.send_message(admin_id, feedback_msg, parse_mode="HTML")
        except Exception:
            pass

    bot.send_message(user_id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")

@bot.message_handler(commands=['schedule'])
def schedule_command(message):
    user_id = int(message.from_user.id)
    user = api_get_user(user_id) or {}

    if is_teacher(user_id):
        teacher_fio = user.get('teacher_fio')
        fio_key = fio_full_to_initials(teacher_fio or '')
        today = get_current_day()
        if not today:
            tomorrow = get_tomorrow_day()
            if tomorrow:
                sch = api_get_teacher_schedule(fio_key)
                text = format_teacher_schedule_for_day(teacher_fio or '', sch or {}, tomorrow)
                bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{text}")
            else:
                bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
        else:
            sch = api_get_teacher_schedule(fio_key)
            text = format_teacher_schedule_for_day(teacher_fio or '', sch or {}, today)
            bot.send_message(user_id, text)
        return

    group_name = user.get('group_name')
    if not group_name:
        bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    today = get_current_day()
    if not today:
        tomorrow = get_tomorrow_day()
        if tomorrow:
            sch = api_get_schedule(group_name)
            schedule_text = format_schedule_for_day(group_name, sch or {}, tomorrow)
            bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{schedule_text}")
        else:
            bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
    else:
        sch = api_get_schedule(group_name)
        schedule_text = format_schedule_for_day(group_name, sch or {}, today)
        bot.send_message(user_id, schedule_text, protect_content=True)

@bot.message_handler(commands=['settings'])
def settings_command(message):
    render_settings_panel(message.from_user.id)

def process_teacher_name(message):
    from bot.utils.api import api_update_user
    teacher_fio_raw = message.text.strip()
    teacher_fio = normalize_full_fio(teacher_fio_raw)

    if not is_valid_full_fio(teacher_fio):
        msg = bot.send_message(
            message.from_user.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é: *–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ*.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –°–∏–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞, –ü–µ—Ç—Ä–æ–≤-–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_teacher_name)
        return

    api_update_user(message.from_user.id, {"teacher_fio": teacher_fio, "group_name": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"})

    keyboard = create_main_keyboard(message.from_user.id, is_teacher=True, is_admin=is_admin(message.from_user.id))
    bot.send_message(
        message.from_user.id,
        f"‚úÖ *{teacher_fio}*, –º—ã –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª–∏!\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø\n"
        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def render_settings_panel(user_id: int):
    from bot.utils.api import api_get_user
    user = api_get_user(user_id) or {}
    user_role = user.get('role', 'student')

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"))

    enabled = bool(user.get('schedule_enabled', False))
    sched_time = user.get('schedule_time', '08:00')
    if enabled:
        kb.add(types.InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="disable_schedule"))
    else:
        kb.add(types.InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="enable_schedule"))
    kb.add(types.InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="change_time"))

    if is_teacher(user_id):
        kb.add(types.InlineKeyboardButton("üë®‚Äçüè´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="teacher_settings"))

    current_group = user.get('group_name') or "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
    teacher_fio = user.get('teacher_fio') if is_teacher(user_id) else None
    text = settings_text(user_role, current_group, enabled, sched_time, teacher_fio)

    bot.send_message(user_id, text, reply_markup=kb)