import asyncio
from threading import Thread
from bot.core import bot
from bot.handlers.commands import is_admin
from telebot import types
from bot.utils.api import api_get_users



def send_notification_progressively(bot, users, message, admin_id: int, context_name: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    –ú–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥.
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏, –∏ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ Message.
    """
    total = len(users)
    sent = 0
    update_step = max(1, total // 10)
    status_msg = bot.send_message(admin_id, f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ({context_name})...\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 0 –∏–∑ {total}")

    is_manual = context_name == "manual_broadcast"
    prefix = "‚ùóÔ∏è–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n\n" if is_manual else ""

    for u in users:
        try:
            uid = u.get("user_id")
            if not uid:
                continue

            # === –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (—Å—Ç—Ä–æ–∫–∞) ===
            if isinstance(message, str):
                bot.send_message(uid, prefix + message)
                sent += 1
                continue

            # === –ï—Å–ª–∏ Telegram Message ===
            ctype = message.content_type
            caption = getattr(message, "caption", None) or ""

            if ctype == "text":
                bot.send_message(uid, prefix + message.text)
            elif ctype == "photo":
                bot.send_photo(uid, message.photo[-1].file_id, caption=prefix + caption)
            elif ctype == "video":
                bot.send_video(uid, message.video.file_id, caption=prefix + caption)
            elif ctype == "document":
                bot.send_document(uid, message.document.file_id, caption=prefix + caption)
            elif ctype == "sticker":
                bot.send_sticker(uid, message.sticker.file_id)
            elif ctype == "voice":
                bot.send_voice(uid, message.voice.file_id, caption=prefix + caption)
            elif ctype == "audio":
                bot.send_audio(uid, message.audio.file_id, caption=prefix + caption)
            elif ctype == "animation":
                bot.send_animation(uid, message.animation.file_id, caption=prefix + caption)
            else:
                continue

            sent += 1

        except Exception as e:
            # –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            continue

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if sent % update_step == 0 or sent == total:
            try:
                bot.edit_message_text(
                    f"üì® –†–∞—Å—Å—ã–ª–∫–∞ ({context_name})...\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –∏–∑ {total}",
                    admin_id,
                    status_msg.message_id
                )
            except:
                pass

        asyncio.run(asyncio.sleep(0.05))

    bot.send_message(admin_id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –∏–∑ {total}.")
    from bot.handlers.admin import render_admin_panel
    render_admin_panel(admin_id)


def handle_mass_notification(call):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∑–≤–æ–Ω–∫–∏ –∏ —Ç.–¥.)
    –ü—Ä–∏–º–µ—Ä callback_data:
      notify_all:bell   ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –æ –∑–≤–æ–Ω–∫–∞—Ö
      notify_all:schedule ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
      skip_notify:bell  ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
        return

    parts = call.data.split(":")
    action = parts[0]  # notify_all / skip_notify
    context_name = parts[1] if len(parts) > 1 else "update"

    if action == "skip_notify":
        bot.answer_callback_query(call.id, "‚è∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
        bot.send_message(user_id, f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ '{context_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        from bot.handlers.admin import render_admin_panel
        render_admin_panel(user_id)
        return

    bot.answer_callback_query(call.id, f"üì¢ –ù–∞—á–∏–Ω–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ({context_name})...")
    users = api_get_users()

    # –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if context_name == "bell":
        msg_text = "üîî –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤!"
    elif context_name == "schedule":
        msg_text = "üìö –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π!"
    else:
        msg_text = "üì¢ –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ!"

    Thread(target=send_notification_progressively, args=(bot, users, msg_text, user_id, context_name)).start()
