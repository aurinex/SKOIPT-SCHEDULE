import os
import re
import json
import threading
from datetime import datetime, timedelta
from collections import defaultdict
from contextlib import closing
from docx import Document
import telebot
from telebot import types
import schedule
import time
import sqlite3

# ============================ –ö–û–ù–§–ò–ì ============================
BOT_TOKEN = os.getenv("BOT_TOKEN", "8253140899:AAFPdH80KTgoKRAUTyuqBJhrs_DLIkw9zto")

SCHEDULE_FILE = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.docx"
USER_DATA_FILE = "user_data.json"   # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
DB_FILE = "bot.db"

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ROLES = {
    'student': 'üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç',
    'teacher': 'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
    'admin':   'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
}

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (user_id)
ADMINS = [1044229010]  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø—Ä–∞–≤—å

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
days_ru_lower = [day.lower() for day in days_ru]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

SHIFTS_FILE = "group_shifts.json"

# –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–∑ DOCX
group_shifts = {}
student_schedules = {}

# --- –§–ò–û: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ---
FIO_FULL_RE = re.compile(
    r'^[–ê-–Ø–Å][–∞-—è—ë]+(?:-[–ê-–Ø–Å][–∞-—è—ë]+)?\s+[–ê-–Ø–Å][–∞-—è—ë]+(?:-[–ê-–Ø–Å][–∞-—è—ë]+)?\s+[–ê-–Ø–Å][–∞-—è—ë]+(?:-[–ê-–Ø–Å][–∞-—è—ë]+)?$'
)

def _cap(part: str) -> str:
    # –ò–≤–∞–Ω–û–≤ -> –ò–≤–∞–Ω–æ–≤; –ø–Å—Ç—Ä -> –ü—ë—Ç—Ä; –¥–≤–æ–π–Ω—ã–µ: –ø–µ—Ç—Ä–æ–≤-—Å–∏–¥–û—Ä–û–≤ -> –ü–µ—Ç—Ä–æ–≤-–°–∏–¥–æ—Ä–æ–≤
    return "-".join(s[:1].upper() + s[1:].lower() for s in part.split("-"))

def normalize_full_fio(text: str) -> str:
    text = re.sub(r'\s+', ' ', text.strip())
    parts = text.split(" ")
    if len(parts) != 3:
        return text
    return " ".join(_cap(p) for p in parts)

def is_valid_full_fio(text: str) -> bool:
    text = re.sub(r'\s+', ' ', text.strip())
    return bool(FIO_FULL_RE.match(text))

# --- –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ" -> "–§–∞–º–∏–ª–∏—è –ò.–û." ---
def fio_full_to_initials(full_fio: str) -> str:
    # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å
    def init(n: str) -> str:
        return (n[:1].upper() + ".") if n else ""
    parts = re.sub(r'\s+', ' ', full_fio.strip()).split(' ')
    if len(parts) < 2:
        return full_fio.strip()
    fam = parts[0]
    name = parts[1] if len(parts) > 1 else ""
    otch = parts[2] if len(parts) > 2 else ""
    # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ–∞–º–∏–ª–∏–∏ (—Å –¥–µ—Ñ–∏—Å–∞–º–∏)
    fam = "-".join(s[:1].upper() + s[1:].lower() for s in fam.split("-"))
    return f"{fam} {init(name)}{init(otch)}"

# --- –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –§–ò–û –∏–∑ —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∫ –≤–∏–¥—É '–§–∞–º–∏–ª–∏—è –ò.–û.' ---
def normalize_teacher_name(name):
    """
    –î–µ–ª–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º: –§–∞–º–∏–ª–∏—è –ò.–û.
    –£–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç/–∫–∞–±–∏–Ω–µ—Ç –∏ –º—É—Å–æ—Ä. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –§–ò–û.
    """
    if not name:
        return None
    name = re.sub(r'\s+', ' ', name.strip())
    # –≤—ã—Ç–∞—â–∏–º '–§–∞–º–∏–ª–∏—è –ò.–û.' –∏–∑ —Å—Ç—Ä–æ–∫–∏
    m = re.search(r'([–ê-–Ø–Å][–∞-—è—ë]+(?:-[–ê-–Ø–Å][–∞-—è—ë]+)?\s+[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.?)', name)
    if m:
        name = m.group(1)
    # —É–±—Ä–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ –∫–æ–Ω—Ü–µ
    name = re.sub(r'\s*\d{2,4}[–ê-–Ø–∞-—è]?$', '', name)
    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã
    name = re.sub(r'([–ê-–Ø–Å])\.([–ê-–Ø–Å])$', r'\1.\2.', name)
    name = re.sub(r'\.\.', '.', name)
    name = re.sub(r'[^–ê-–Ø–∞-—è–Å—ë.\s-]', '', name).strip()
    if not re.match(r'^[–ê-–Ø–Å][–∞-—è—ë-]+\s+[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.?$', name):
        return None
    # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏ (—É—á—Ç—ë–º –¥–µ—Ñ–∏—Å—ã)
    fam, ini = name.split(maxsplit=1)
    fam = "-".join(s[:1].upper() + s[1:].lower() for s in fam.split("-"))
    return f"{fam} {ini}"

# --- –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–º–µ–Ω (–∫–∞–∫ –≤ —Ç–≤–æ—ë–º –ø–∞—Ä—Å–µ—Ä–µ, –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞) ---
def load_group_shifts():
    global group_shifts
    group_shifts = {}
    if os.path.exists(SHIFTS_FILE):
        try:
            with open(SHIFTS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                for k, v in data.items():
                    if isinstance(v, dict):
                        group_shifts[k] = {"shift": v.get("shift", 1), "room": v.get("room", "")}
                    else:
                        group_shifts[k] = {"shift": v, "room": ""}
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω –¥–ª—è {len(group_shifts)} –≥—Ä—É–ø–ø")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {SHIFTS_FILE}: {e}")

# ======================== –ë–õ–û–ö –†–ê–ë–û–¢–´ –° –ë–î ========================

def db_connect():
    return sqlite3.connect(DB_FILE, check_same_thread=False)

def db_init():
    with closing(db_connect()) as conn, conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id     INTEGER PRIMARY KEY,
            role        TEXT NOT NULL DEFAULT 'student',   -- student|teacher|admin
            group_name  TEXT,                              -- –Ω–∞–ø—Ä–∏–º–µ—Ä: "1–ê"
            teacher_fio TEXT                               -- –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω–æ–≤ –ò.–ò."
        );
        """)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS schedule_prefs (
            user_id     INTEGER PRIMARY KEY,
            enabled     INTEGER NOT NULL DEFAULT 0,        -- 0/1
            time        TEXT NOT NULL DEFAULT '08:00',
            FOREIGN KEY(user_id) REFERENCES users(user_id) ON DELETE CASCADE
        );
        """)

def db_get_role(user_id: int) -> str:
    with closing(db_connect()) as conn:
        row = conn.execute("SELECT role FROM users WHERE user_id = ?", (user_id,)).fetchone()
        return row[0] if row else 'student'

def db_set_role(user_id: int, role: str):
    with closing(db_connect()) as conn, conn:
        conn.execute("""
            INSERT INTO users(user_id, role) VALUES(?, ?)
            ON CONFLICT(user_id) DO UPDATE SET role=excluded.role
        """, (user_id, role))

def db_get_group(user_id: int):
    with closing(db_connect()) as conn:
        row = conn.execute("SELECT group_name FROM users WHERE user_id = ?", (user_id,)).fetchone()
        return row[0] if row and row[0] else None

def db_set_group(user_id: int, group_name: str):
    with closing(db_connect()) as conn, conn:
        conn.execute("""
            INSERT INTO users(user_id, group_name) VALUES(?, ?)
            ON CONFLICT(user_id) DO UPDATE SET group_name=excluded.group_name
        """, (user_id, group_name))

def db_get_teacher_fio(user_id: int):
    with closing(db_connect()) as conn:
        row = conn.execute("SELECT teacher_fio FROM users WHERE user_id = ?", (user_id,)).fetchone()
        return row[0] if row and row[0] else None

def db_set_teacher_fio(user_id: int, fio: str):
    with closing(db_connect()) as conn, conn:
        conn.execute("""
            INSERT INTO users(user_id, teacher_fio) VALUES(?, ?)
            ON CONFLICT(user_id) DO UPDATE SET teacher_fio=excluded.teacher_fio
        """, (user_id, fio))

def db_get_schedule_pref(user_id: int) -> dict:
    with closing(db_connect()) as conn:
        row = conn.execute("SELECT enabled, time FROM schedule_prefs WHERE user_id = ?", (user_id,)).fetchone()
        if not row:
            return {"enabled": False, "time": "08:00"}
        return {"enabled": bool(row[0]), "time": row[1]}

def db_set_schedule_pref(user_id: int, enabled: bool = None, time_str: str = None):
    cur = db_get_schedule_pref(user_id)  # —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if enabled is not None:
        cur["enabled"] = enabled
    if time_str is not None:
        cur["time"] = time_str
    with closing(db_connect()) as conn, conn:
        conn.execute("""
            INSERT INTO schedule_prefs(user_id, enabled, time) VALUES(?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET enabled=excluded.enabled, time=excluded.time
        """, (user_id, int(cur["enabled"]), cur["time"]))

def db_users_for_time(time_str: str):
    """–°–ø–∏—Å–æ–∫ (user_id, group_name) —É –∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç."""
    with closing(db_connect()) as conn:
        return conn.execute("""
            SELECT u.user_id, u.group_name
            FROM schedule_prefs sp
            JOIN users u ON u.user_id = sp.user_id
            WHERE sp.enabled = 1
              AND sp.time = ?
              AND u.group_name IS NOT NULL
              AND u.group_name <> ''
        """, (time_str,)).fetchall()

def db_count_stats() -> dict:
    with closing(db_connect()) as conn:
        total = conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]
        students = conn.execute("SELECT COUNT(*) FROM users WHERE role='student'").fetchone()[0]
        teachers = conn.execute("SELECT COUNT(*) FROM users WHERE role='teacher'").fetchone()[0]
        admins = conn.execute("SELECT COUNT(*) FROM users WHERE role='admin'").fetchone()[0]
        groups = conn.execute("SELECT COUNT(DISTINCT group_name) FROM users WHERE group_name IS NOT NULL AND group_name <> ''").fetchone()[0]
        subs = conn.execute("SELECT COUNT(*) FROM schedule_prefs WHERE enabled=1").fetchone()[0]
        return {"total": total, "students": students, "teachers": teachers, "admins": admins, "groups": groups, "subs": subs}

def db_list_last_users(limit: int = 10):
    with closing(db_connect()) as conn:
        return conn.execute("""
            SELECT user_id, role, COALESCE(group_name, '')
            FROM users
            ORDER BY user_id DESC
            LIMIT ?
        """, (limit,)).fetchall()

# ---------------------- –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ JSON (–æ–¥–∏–Ω —Ä–∞–∑) ----------------------
def migrate_json_to_db():
    if not os.path.exists(USER_DATA_FILE):
        return
    try:
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        ug = data.get('user_groups', {})
        ur = data.get('user_roles', {})
        tn = data.get('teacher_names', {})
        sm = data.get('scheduled_messages', {})

        def to_int_keys(d):
            out = {}
            for k, v in d.items():
                try:
                    out[int(k)] = v
                except:
                    pass
            return out

        ug = to_int_keys(ug)
        ur = to_int_keys(ur)
        tn = to_int_keys(tn)
        sm = to_int_keys(sm)

        with closing(db_connect()) as conn, conn:
            for uid, role in ur.items():
                conn.execute("INSERT OR IGNORE INTO users(user_id, role) VALUES(?, ?)", (uid, role))
            for uid, grp in ug.items():
                conn.execute("""
                    INSERT INTO users(user_id, group_name) VALUES(?, ?)
                    ON CONFLICT(user_id) DO UPDATE SET group_name=excluded.group_name
                """, (uid, grp))
            for uid, fio in tn.items():
                conn.execute("""
                    INSERT INTO users(user_id, teacher_fio) VALUES(?, ?)
                    ON CONFLICT(user_id) DO UPDATE SET teacher_fio=excluded.teacher_fio
                """, (uid, fio))
            for uid, row in sm.items():
                enabled = 1 if row.get('enabled', False) else 0
                t = row.get('time', '08:00')
                conn.execute("""
                    INSERT INTO schedule_prefs(user_id, enabled, time) VALUES(?, ?, ?)
                    ON CONFLICT(user_id) DO UPDATE SET enabled=excluded.enabled, time=excluded.time
                """, (uid, enabled, t))
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ SQLite –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        # os.rename(USER_DATA_FILE, USER_DATA_FILE + ".bak")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ JSON: {e}")

# ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======================

def load_user_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ —Ä–∞–∑–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∏–∑ JSON (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    db_init()
    migrate_json_to_db()
    stats = db_count_stats()
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {stats['total']}")
    print(f"üë• –†–æ–ª–∏: {stats['students']} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, {stats['teachers']} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, {stats['admins']} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

def save_user_data():
    """–ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ: –≤—Å–µ –ø–∏—à–µ—Ç—Å—è —Å—Ä–∞–∑—É –≤ –ë–î."""
    pass

def get_user_role(user_id: int):
    """–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º ADMINS."""
    if user_id in ADMINS:
        db_set_role(user_id, 'admin')
        return 'admin'
    role = db_get_role(user_id)
    if role not in ('student', 'teacher', 'admin'):
        role = 'student'
        db_set_role(user_id, role)
    return role

def is_admin(user_id: int) -> bool:
    return get_user_role(user_id) == 'admin'

def is_teacher(user_id: int) -> bool:
    return get_user_role(user_id) in ['teacher', 'admin']

def is_teacher_only(user_id: int) -> bool:
    return get_user_role(user_id) == 'teacher'

def get_sorted_groups(groups_list):
    """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—ã –ø–æ –∫—É—Ä—Å–∞–º –∏ –∞–ª—Ñ–∞–≤–∏—Ç—É."""
    def get_course(group_name):
        match = re.match(r'(\d+)', group_name)
        return int(match.group(1)) if match else 0
    def get_group_suffix(group_name):
        match = re.match(r'\d+\s*([–ê-–Ø–∞-—èA-Za-z]*)', group_name)
        return match.group(1) if match else group_name
    return sorted(groups_list, key=lambda x: (get_course(x), get_group_suffix(x)))

def parse_schedule_from_docx(file_path):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ DOCX –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –°–∞–ª–∞–≤–∞—Ç—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞."""
    doc = Document(file_path)
    schedules = {}
    current_group = None

    for paragraph in doc.paragraphs:
        text = paragraph.text.strip()
        if not text:
            continue
        group_match = re.search(r'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤\s+–¥–ª—è\s+(.+?)\s+–≥—Ä—É–ø–ø—ã', text)
        if group_match:
            current_group = group_match.group(1).strip()
            schedules[current_group] = {
                'days': {day: {} for day in days_ru},
                'zero_lesson': {day: {} for day in days_ru}
            }
            continue

    tables = [t for t in doc.tables if any(day in "\n".join(cell.text for row in t.rows for cell in row.cells) for day in days_ru)]
    group_index = 0
    group_names = list(schedules.keys())
    for table in tables:
        if group_index >= len(group_names):
            break
        group_name = group_names[group_index]
        parse_schedule_table_fixed(table, group_name, schedules, days_ru)
        group_index += 1

    return schedules

def parse_schedule_table_fixed(table, group_name, schedules, days_ru):
    """–£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."""
    rows = table.rows
    if not rows:
        return
    header = [cell.text.strip() for cell in rows[0].cells]
    if len(header) < 2:
        return

    day_columns = {}
    for idx, cell in enumerate(header[1:], 1):
        for day in days_ru:
            if day in cell:
                day_columns[idx] = day
                break

    for r in rows[1:]:
        cells = [c.text.strip() for c in r.cells]
        if not cells or not cells[0]:
            continue

        lesson_num = cells[0].strip()
        if not re.match(r'^\d+$', lesson_num):
            continue

        for idx, text in enumerate(cells[1:], 1):
            if idx not in day_columns:
                continue
            day = day_columns[idx]
            if not text.strip():
                continue
            lesson_info = parse_lesson_info_fixed(text)
            if lesson_info:
                if lesson_num == "0":
                    schedules[group_name]['zero_lesson'][day] = lesson_info
                else:
                    schedules[group_name]['days'][day][lesson_num] = lesson_info

def parse_lesson_info_fixed(cell_text):
    """–ê–Ω–∞–ª–∏–∑ —è—á–µ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""
    text = re.sub(r'\s+', ' ', cell_text.strip())
    if not text or text == '##':
        return None
    if len(text) < 2 or re.match(r'^\d+$', text):
        return None

    teacher_match = re.search(r'([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.?)$', text)
    teacher = teacher_match.group(1) if teacher_match else ''

    text_without_teacher = re.sub(r'\s*' + re.escape(teacher) + r'\s*$', '', text).strip() if teacher else text
    classroom_match = re.search(r'(\d{2,4}[–ê-–Ø–∞-—è]?)$', text_without_teacher)
    classroom = classroom_match.group(1) if classroom_match else ''
    subject = re.sub(r'\s*' + re.escape(classroom) + r'\s*$', '', text_without_teacher).strip() if classroom else text_without_teacher

    subject = re.sub(r'\s+', ' ', subject).strip()
    teacher = re.sub(r'\s+', ' ', teacher).strip()
    classroom = classroom.strip()
    return {'subject': subject or text, 'teacher': teacher, 'classroom': classroom}

def get_current_day():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (None –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è)."""
    today = datetime.now().weekday()
    if today == 6:
        return None
    return days_ru[today]

def get_tomorrow_day():
    tomorrow = (datetime.now() + timedelta(days=1)).weekday()
    if tomorrow == 6:
        return None
    return days_ru[tomorrow]

def format_schedule_for_day(group_name, day):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    if group_name not in student_schedules:
        return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    schedule_data = student_schedules[group_name]
    has_lessons = False
    zero_lesson = schedule_data['zero_lesson'].get(day, {})
    day_lessons = schedule_data['days'].get(day, {})
    if zero_lesson or day_lessons:
        has_lessons = True
    if not has_lessons:
        return f"üìÖ –í {day} –ø–∞—Ä –Ω–µ—Ç"

    result = f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} ({group_name}):\n\n"
    lessons_today = []
    if zero_lesson:
        subject = zero_lesson.get('subject', '')
        classroom = zero_lesson.get('classroom', '')
        teacher = zero_lesson.get('teacher', '')
        if subject:
            lesson_text = f"0. {subject}"
            if classroom:
                lesson_text += f" {classroom} –∫–∞–±."
            if teacher:
                lesson_text += f" ({teacher})"
            lessons_today.append(lesson_text)
    for lesson_num in sorted(day_lessons.keys(), key=int):
        lesson_info = day_lessons[lesson_num]
        subject = lesson_info.get('subject', '')
        classroom = lesson_info.get('classroom', '')
        teacher = lesson_info.get('teacher', '')
        if subject:
            lesson_text = f"{lesson_num}. {subject}"
            if classroom:
                lesson_text += f" {classroom} –∫–∞–±."
            if teacher:
                lesson_text += f" ({teacher})"
            lessons_today.append(lesson_text)
    if not lessons_today:
        return f"üìÖ –í {day} –ø–∞—Ä –Ω–µ—Ç"
    result += "\n".join(lessons_today)
    return result

def create_teacher_schedules(student_schedules: dict) -> dict:
    """
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—Ä—É–ø–ø —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–º–µ–Ω–∞–º.
    –ö–ª—é—á ‚Äî '–§–∞–º–∏–ª–∏—è –ò.–û.' (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π).
    """
    teacher_map = defaultdict(lambda: {
        'first_shift': defaultdict(dict),   # {'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': {'1': {...}}}
        'second_shift': defaultdict(dict)
    })

    for group, schedule_data in student_schedules.items():
        # –∫–∞–∫–∞—è —Å–º–µ–Ω–∞ —É –≥—Ä—É–ø–ø—ã?
        info = group_shifts.get(group, {"shift": 1, "room": ""})
        shift = info.get("shift", 1)
        room_default = info.get("room", "")
        if shift == 0:
            continue
        shift_key = 'first_shift' if shift == 1 else 'second_shift'

        # –Ω—É–ª–µ–≤–∞—è
        for day, zero in schedule_data.get('zero_lesson', {}).items():
            if zero and zero.get('teacher'):
                t = normalize_teacher_name(zero['teacher'])
                if t:
                    classroom = zero.get('classroom') or room_default
                    teacher_map[t][shift_key][day]['0'] = {
                        'subject': zero.get('subject', ''),
                        'group': group,
                        'classroom': classroom
                    }
        # –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä—ã
        for day, lessons in schedule_data.get('days', {}).items():
            for num, info_l in lessons.items():
                if info_l and info_l.get('teacher'):
                    t = normalize_teacher_name(info_l['teacher'])
                    if t:
                        classroom = info_l.get('classroom') or room_default
                        teacher_map[t][shift_key][day][str(num)] = {
                            'subject': info_l.get('subject', ''),
                            'group': group,
                            'classroom': classroom
                        }
    return {k: v for k, v in teacher_map.items()}

def format_teacher_schedule_for_day(teacher_full_fio: str, day: str) -> str:
    """
    –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
    –ò—â–µ–º –ø–æ –∫–ª—é—á—É '–§–∞–º–∏–ª–∏—è –ò.–û.' –≤ teacher_schedules.
    """
    if not teacher_full_fio:
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"

    key = fio_full_to_initials(teacher_full_fio)
    ts = teacher_schedules.get(key)

    # üëá –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
    print(f"[TEACHER LOOKUP] full='{teacher_full_fio}' -> key='{key}', "
          f"total_teachers={len(teacher_schedules)}; "
          f"have_key={key in teacher_schedules}")

    if not ts:
        return f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {teacher_full_fio} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    lessons = []
    # –ø–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞
    d1 = ts['first_shift'].get(day, {})
    for num in sorted(d1.keys(), key=lambda x: int(x)):
        info = d1[num]
        subject = info.get('subject', '')
        group = info.get('group', '')
        room = info.get('classroom', '')
        s = f"{num}. {subject}"
        if group: s += f" ‚Äî {group}"
        if room:  s += f" ({room})"
        s += " [1 —Å–º–µ–Ω–∞]"
        lessons.append(s)

    # –≤—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞
    d2 = ts['second_shift'].get(day, {})
    for num in sorted(d2.keys(), key=lambda x: int(x)):
        info = d2[num]
        subject = info.get('subject', '')
        group = info.get('group', '')
        room = info.get('classroom', '')
        s = f"{num}. {subject}"
        if group: s += f" ‚Äî {group}"
        if room:  s += f" ({room})"
        s += " [2 —Å–º–µ–Ω–∞]"
        lessons.append(s)

    if not lessons:
        return f"üìÖ –í {day} –ø–∞—Ä –Ω–µ—Ç"
    return f"üë®‚Äçüè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ {day}\n{teacher_full_fio}\n\n" + "\n".join(lessons)

def create_main_keyboard(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.add(types.KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è"), types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    keyboard.add(types.KeyboardButton("üìÖ –ü–ù"), types.KeyboardButton("üìÖ –í–¢"), types.KeyboardButton("üìÖ –°–†"))
    keyboard.add(types.KeyboardButton("üìÖ –ß–¢"), types.KeyboardButton("üìÖ –ü–¢"), types.KeyboardButton("üìÖ –°–ë"))

    if is_teacher(user_id):
        keyboard.add(types.KeyboardButton("üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"))
    if is_admin(user_id):
        keyboard.add(types.KeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    return keyboard

# ======================= –†–ê–°–°–´–õ–ö–ò / –ü–õ–ê–ù–ò–†–û–í–©–ò–ö =======================

def send_schedule_for_users(users):
    """users: iterable[(user_id, group_name)]"""
    today = get_current_day()
    if not today:
        return
    for user_id, group_name in users:
        try:
            if is_teacher(user_id) and db_get_teacher_fio(user_id):
                text = format_teacher_schedule_for_day(db_get_teacher_fio(user_id), today)
            else:
                text = format_schedule_for_day(group_name, today)
            bot.send_message(user_id, text)
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def tick_schedules_each_minute():
    """–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —É –∫–æ–≥–æ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    now_str = datetime.now().strftime("%H:%M")
    users = db_users_for_time(now_str)
    if users:
        send_schedule_for_users(users)

def schedule_worker():
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π ¬´—Ç–∏–∫¬ª —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    while True:
        try:
            tick_schedules_each_minute()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∏–∫–µ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        time.sleep(60)

# ======================== –°–¢–ê–†–¢–û–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê ========================

load_user_data()

# 1) –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
if os.path.exists(SCHEDULE_FILE):
    print("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    student_schedules = parse_schedule_from_docx(SCHEDULE_FILE)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {len(student_schedules)} –≥—Ä—É–ø–ø")
    if student_schedules:
        sorted_groups = get_sorted_groups(list(student_schedules.keys()))
        print(f"üìä –ì—Ä—É–ø–ø—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫—É—Ä—Å–∞–º:")
        for group in sorted_groups:
            print(f"   - {group}")
else:
    print(f"‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è '{SCHEDULE_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# 2) –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ–Ω—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
load_group_shifts()
teacher_schedules = create_teacher_schedules(student_schedules)
print(f"üë®‚Äçüè´ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(teacher_schedules)} –∑–∞–ø–∏—Å–µ–π")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–µ–∂–µ–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∏–∫)
scheduler_thread = threading.Thread(target=schedule_worker, daemon=True)
scheduler_thread.start()

# ======================== –•–≠–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î ========================

@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = int(message.from_user.id)
    user_role = get_user_role(user_id)

    teacher_fio = db_get_teacher_fio(user_id)

    print(f"DEBUG start_command: user_id={user_id}, user_role={user_role}")
    print(f"DEBUG: teacher_fio = {teacher_fio}")

    # –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (–∏–ª–∏ –∞–¥–º–∏–Ω) –∏ –§–ò–û –µ—â–µ –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –§–ò–û
    if is_teacher(user_id) and not teacher_fio:
        print("DEBUG: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –±–µ–∑ –§–ò–û - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û")
        msg = bot.send_message(
            user_id,
            "üë®‚Äçüè´ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_teacher_name)
        return

    # –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –§–ò–û —É–∂–µ –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if is_teacher(user_id) and teacher_fio:
        print("DEBUG: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –§–ò–û - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
        db_set_group(user_id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        keyboard = create_main_keyboard(user_id)
        bot.send_message(
            user_id,
            f"üë®‚Äçüè´ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {teacher_fio}!*\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        return

    # –ò–Ω–∞—á–µ ‚Äî —Å—Ç—É–¥–µ–Ω—Ç/–Ω–µ–ø—Ä–µ–ø–æ–¥: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    print(f"DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã - user_role={user_role}, is_teacher={is_teacher(user_id)}")
    show_group_selection(user_id, user_role)

def process_teacher_name(message):
    user_id = int(message.from_user.id)
    teacher_fio_raw = message.text.strip()
    teacher_fio = normalize_full_fio(teacher_fio_raw)

    if not is_valid_full_fio(teacher_fio):
        msg = bot.send_message(
            user_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é: *–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ*.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –°–∏–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞, –ü–µ—Ç—Ä–æ–≤-–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_teacher_name)
        return

    db_set_teacher_fio(user_id, teacher_fio)
    db_set_group(user_id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")

    keyboard = create_main_keyboard(user_id)
    bot.send_message(
        user_id,
        f"‚úÖ *{teacher_fio}*, –º—ã –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª–∏!\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø\n"
        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def show_group_selection(user_id: int, user_role: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–∂–µ —Å –§–ò–û ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    if is_teacher(user_id) and db_get_teacher_fio(user_id):
        print(f"DEBUG: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {user_id} —Å –§–ò–û {db_get_teacher_fio(user_id)} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã")
        return

    if student_schedules:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        sorted_groups = get_sorted_groups(list(student_schedules.keys()))

        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        if is_admin(user_id):
            keyboard.add(types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))

        for i in range(0, len(sorted_groups), 2):
            row = sorted_groups[i:i+2]
            keyboard.add(*[types.KeyboardButton(group) for group in row])

        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

        welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –°–∞–ª–∞–≤–∞—Ç—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞\n\n"
        if is_admin(user_id):
            welcome_text += "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'\n\n"
        elif is_teacher(user_id):
            welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
        else:
            welcome_text += "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"

        bot.send_message(user_id, welcome_text, reply_markup=keyboard)
    else:
        bot.send_message(user_id, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['schedule'])
def schedule_command(message):
    user_id = int(message.from_user.id)
    if is_teacher(user_id):
        # –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
        teacher_fio = db_get_teacher_fio(user_id)
        today = get_current_day()
        if not today:
            tomorrow = get_tomorrow_day()
            if tomorrow:
                text = format_teacher_schedule_for_day(teacher_fio, tomorrow)
                bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{text}")
            else:
                bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
        else:
            text = format_teacher_schedule_for_day(teacher_fio, today)
            bot.send_message(user_id, text)
        return

    # —Å—Ç—É–¥–µ–Ω—Ç/–æ–±—ã—á–Ω—ã–π ‚Äî –∫–∞–∫ –±—ã–ª–æ
    group_name = db_get_group(user_id)
    if not group_name:
        bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    today = get_current_day()
    if not today:
        tomorrow = get_tomorrow_day()
        if tomorrow:
            schedule_text = format_schedule_for_day(group_name, tomorrow)
            bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{schedule_text}")
        else:
            bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
    else:
        schedule_text = format_schedule_for_day(group_name, today)
        bot.send_message(user_id, schedule_text)

@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = int(message.from_user.id)
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    render_admin_panel(user_id)

@bot.message_handler(commands=['teacher'])
def teacher_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /teacher - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = int(message.from_user.id)
    if not is_teacher(user_id):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üìö –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è", callback_data="teacher_lessons"))
    keyboard.add(types.InlineKeyboardButton("üë• –ú–æ–∏ –≥—Ä—É–ø–ø—ã", callback_data="teacher_groups"))
    if is_admin(user_id):
        keyboard.add(types.InlineKeyboardButton("üëë –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

    bot.send_message(user_id, "üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@bot.message_handler(commands=['settings'])
def settings_command(message):
    render_settings_panel(message.from_user.id)

# ================== CALLBACK'–∏ –ê–î–ú–ò–ù–ê –ò –ü–†–ï–ü–û–î–ê ==================

def render_settings_panel(user_id: int, message_id: int | None = None):
    """–†–µ–Ω–¥–µ—Ä —ç–∫—Ä–∞–Ω–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' (–∫–∞–∫ send_message, —Ç–∞–∫ –∏ edit_message_text)."""
    user_role = get_user_role(user_id)

    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"))

    user_schedule = db_get_schedule_pref(user_id)
    if user_schedule.get('enabled', False):
        keyboard.add(types.InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="disable_schedule"))
    else:
        keyboard.add(types.InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="enable_schedule"))
    keyboard.add(types.InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="change_time"))

    if is_teacher(user_id):
        keyboard.add(types.InlineKeyboardButton("üë®‚Äçüè´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="teacher_settings"))

    # –¢–µ–∫—Å—Ç
    current_group = db_get_group(user_id) or "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
    schedule_status = "–≤–∫–ª—é—á–µ–Ω–∞" if user_schedule.get('enabled', False) else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
    schedule_time = user_schedule.get('time', '08:00')

    teacher_info = ""
    teacher_fio = db_get_teacher_fio(user_id)
    if is_teacher(user_id) and teacher_fio:
        teacher_info = f"üë®‚Äçüè´ –§–ò–û: {teacher_fio}\n"

    text = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ | {ROLES[user_role]}\n\n"
        f"{teacher_info}"
        f"üìö –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {current_group}\n"
        f"üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {schedule_status}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {schedule_time}"
    )

    if message_id is not None:
        bot.edit_message_text(text, user_id, message_id, reply_markup=keyboard)
    else:
        bot.send_message(user_id, text, reply_markup=keyboard)

def build_admin_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"))
    kb.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    kb.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_refresh"))
    return kb

def render_admin_panel(chat_id: int, message_id: int | None = None):
    text = "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kb = build_admin_keyboard()
    if message_id:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=kb)
    else:
        bot.send_message(chat_id, text, reply_markup=kb)

def build_teacher_keyboard(user_id: int):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üìö –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è", callback_data="teacher_lessons"))
    kb.add(types.InlineKeyboardButton("üë• –ú–æ–∏ –≥—Ä—É–ø–ø—ã", callback_data="teacher_groups"))
    if is_admin(user_id):
        kb.add(types.InlineKeyboardButton("üëë –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    return kb

def render_teacher_panel(user_id: int, message_id: int | None = None):
    text = "üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kb = build_teacher_keyboard(user_id)
    if message_id:
        bot.edit_message_text(text, user_id, message_id, reply_markup=kb)
    else:
        bot.send_message(user_id, text, reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def admin_callback_handler(call):
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    if call.data == "admin_users":
        show_user_management(call)
        bot.answer_callback_query(call.id)
    elif call.data == "admin_stats":
        show_admin_stats(call)
        bot.answer_callback_query(call.id)
    elif call.data == "admin_refresh":
        # –≤–Ω—É—Ç—Ä–∏ refresh_schedule —É–∂–µ –µ—Å—Ç—å answer_callback_query
        refresh_schedule(call)
    elif call.data == "admin_panel":
        render_admin_panel(user_id)  # –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
        bot.answer_callback_query(call.id)
    elif call.data == "admin_set_teacher":
        set_teacher_callback(call)          # –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        bot.answer_callback_query(call.id)
    elif call.data == "admin_back":
        # ‚Ü©Ô∏è –∏–º–µ–Ω–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        render_admin_panel(user_id, message_id=call.message.message_id)
        bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('teacher_'))
def teacher_callback_handler(call):
    user_id = call.from_user.id
    if not is_teacher(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    if call.data == "teacher_lessons":
        show_teacher_lessons(call)
        bot.answer_callback_query(call.id)
    elif call.data == "teacher_groups":
        show_teacher_groups(call)
        bot.answer_callback_query(call.id)
    elif call.data == "teacher_settings":
        show_teacher_settings(call)
        bot.answer_callback_query(call.id)
    elif call.data == "teacher_back":
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—Å–µ–¥–∂ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞
        render_teacher_panel(user_id, message_id=call.message.message_id)
        bot.answer_callback_query(call.id)

def show_user_management(call):
    user_id = call.from_user.id
    message_id = call.message.message_id

    rows = db_list_last_users()
    users_info = []
    for uid, role, grp in rows:
        info = f"{uid}: {ROLES.get(role, role)}, –≥—Ä—É–ø–ø–∞: {grp or '–Ω–µ—Ç –≥—Ä—É–ø–ø—ã'}"
        fio = db_get_teacher_fio(uid)
        if fio:
            info += f", –§–ò–û: {fio}"
        users_info.append(info)

    users_text = "\n".join(users_info)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="admin_set_teacher"))
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))

    total = db_count_stats()['total']
    bot.edit_message_text(
        f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_text}",
        user_id, message_id, reply_markup=keyboard
    )

def show_admin_stats(call):
    user_id = call.from_user.id
    message_id = call.message.message_id

    s = db_count_stats()
    stats_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
                  f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {s['total']}\n"
                  f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {s['students']}\n"
                  f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {s['teachers']}\n"
                  f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {s['admins']}\n"
                  f"üìö –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {s['groups']}\n"
                  f"üîî –ü–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {s['subs']}")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
    bot.edit_message_text(stats_text, user_id, message_id, reply_markup=keyboard)

def refresh_schedule(call):
    user_id = call.from_user.id
    message_id = call.message.message_id

    global student_schedules
    try:
        new_schedule = parse_schedule_from_docx(SCHEDULE_FILE)
        if new_schedule:
            student_schedules = new_schedule
            load_group_shifts()
            global teacher_schedules
            teacher_schedules = create_teacher_schedules(student_schedules)
            bot.answer_callback_query(call.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

            # —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ–≥–æ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞
            # (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º/–ø–æ—Å–ª–µ–¥–Ω–∏–º)
            text = "üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
            rows = db_list_last_users(1000)
            notified = 0
            for uid, _, grp in rows:
                if grp:
                    try:
                        bot.send_message(uid, text)
                        notified += 1
                    except:
                        pass

            bot.edit_message_text(
                f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"üìö –ì—Ä—É–ø–ø –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(student_schedules)}\n"
                f"üë• –£–≤–µ–¥–æ–º–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {notified}",
                user_id, message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def show_teacher_lessons(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    teacher_fio = db_get_teacher_fio(user_id) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="teacher_back"))
    bot.edit_message_text(
        f"üë®‚Äçüè´ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è\n\n"
        f"–§–ò–û: {teacher_fio}\n"
        f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π...",
        user_id, message_id, reply_markup=kb
    )

def show_teacher_groups(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="teacher_back"))
    bot.edit_message_text(
        "üë• –ú–æ–∏ –≥—Ä—É–ø–ø—ã\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø...",
        user_id, message_id, reply_markup=kb
    )

def show_teacher_settings(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    teacher_fio = db_get_teacher_fio(user_id) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="teacher_change_fio"))
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back"))
    bot.edit_message_text(
        f"üë®‚Äçüè´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
        f"–¢–µ–∫—É—â–µ–µ –§–ò–û: {teacher_fio}",
        user_id, message_id, reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == "settings_back")
def settings_back_handler(call):
    user_id = call.from_user.id
    render_settings_panel(user_id, message_id=call.message.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "teacher_change_fio")
def change_teacher_fio_callback(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    if not is_teacher(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    msg = bot.edit_message_text(
        "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
        user_id, message_id
    )
    bot.register_next_step_handler(msg, process_teacher_fio_change)

def process_teacher_fio_change(message):
    user_id = int(message.from_user.id)
    new_fio_raw = message.text.strip()
    new_fio = normalize_full_fio(new_fio_raw)

    if not is_valid_full_fio(new_fio):
        msg = bot.send_message(
            user_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é: *–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ*.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –°–∏–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_teacher_fio_change)
        return

    db_set_teacher_fio(user_id, new_fio)
    bot.send_message(user_id, f"‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: *{new_fio}*", parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data == "admin_set_teacher")
def set_teacher_callback(call):
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º send_message, —á—Ç–æ–±—ã register_next_step_handler —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–∞–±–∏–ª—å–Ω–æ
    msg = bot.send_message(
        user_id,
        "üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª."
    )
    bot.register_next_step_handler(msg, process_teacher_appointment)

def process_teacher_appointment(message):
    admin_id = message.from_user.id
    text = message.text.strip()

    if not is_admin(admin_id):
        bot.send_message(admin_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    if text.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "–Ω–∞–∑–∞–¥"):
        bot.send_message(admin_id, "‚õîÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        render_admin_panel(admin_id)  # –≤–µ—Ä–Ω—ë–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
        return

    # –ü–æ–¥–¥–µ—Ä–∂–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–∑–∞–ø—è—Ç—É—é/–ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    raw_ids = re.split(r'[,\s]+', text)
    ok, fail = [], []

    for token in raw_ids:
        if not token:
            continue
        try:
            uid = int(token)
            db_set_role(uid, 'teacher')
            ok.append(uid)
            # –ø–æ–ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(
                    uid,
                    "üéâ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è!\n"
                    "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
            except:
                pass
        except:
            fail.append(token)

    if ok:
        bot.send_message(admin_id, f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏: {', '.join(map(str, ok))}")
    if fail:
        bot.send_message(admin_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {', '.join(fail)}")

    # –í–µ—Ä–Ω—ë–º—Å—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é ‚Äî –Ω–∞ –≤—ã–±–æ—Ä)
    render_admin_panel(admin_id)

# ============== CALLBACK'–∏ –ù–ê–°–¢–†–û–ï–ö –†–ê–°–°–´–õ–ö–ò/–ì–†–£–ü–ü–´ ==============

@bot.callback_query_handler(func=lambda call: call.data in ("change_group", "enable_schedule", "disable_schedule", "change_time"))
def settings_callbacks(call):
    user_id = int(call.from_user.id)
    data = call.data

    if data == "change_group":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø
        show_group_selection(user_id, get_user_role(user_id))
        bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ")
        return

    if data == "enable_schedule":
        db_set_schedule_pref(user_id, enabled=True)
        bot.answer_callback_query(call.id, "üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
        # –æ–±–Ω–æ–≤–∏–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_command(call.message)
        return

    if data == "disable_schedule":
        db_set_schedule_pref(user_id, enabled=False)
        bot.answer_callback_query(call.id, "üîï –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        settings_command(call.message)
        return

    if data == "change_time":
        msg = bot.send_message(user_id, "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00):")
        bot.register_next_step_handler(msg, process_change_time)
        return

def process_change_time(message):
    user_id = int(message.from_user.id)
    text = message.text.strip()
    if not re.match(r'^\d{2}:\d{2}$', text):
        msg = bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:00.")
        bot.register_next_step_handler(msg, process_change_time)
        return
    hh, mm = text.split(':')
    try:
        hh_i, mm_i = int(hh), int(mm)
        if not (0 <= hh_i < 24 and 0 <= mm_i < 60):
            raise ValueError
    except:
        msg = bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:00.")
        bot.register_next_step_handler(msg, process_change_time)
        return
    db_set_schedule_pref(user_id, time_str=text)
    bot.send_message(user_id, f"‚úÖ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {text}")
    # –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings_command(message)

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===================

@bot.message_handler(func=lambda message: True)
def text_message_handler(message):
    user_id = int(message.from_user.id)
    text = message.text.strip()
    user_role = get_user_role(user_id)

    # –ê–¥–º–∏–Ω—Å–∫–∞—è ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
    if text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" and is_admin(user_id):
        db_set_group(user_id, "–ê–¥–º–∏–Ω")
        keyboard = create_main_keyboard(user_id)
        bot.send_message(
            user_id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "üëë –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
            reply_markup=keyboard
        )
        return

    # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    if text in student_schedules:
        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if is_teacher(user_id):
            group_name = text
            schedule_text = format_schedule_for_day(group_name, get_current_day() or "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
            bot.send_message(user_id, schedule_text)
            return

        # –°—Ç—É–¥–µ–Ω—Ç–∞–º ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É
        db_set_role(user_id, 'student')
        db_set_group(user_id, text)
        keyboard = create_main_keyboard(user_id)
        role_text = "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç"
        bot.send_message(
            user_id,
            f"‚úÖ –ì—Ä—É–ø–ø–∞ {text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"{role_text}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–°–µ–≥–æ–¥–Ω—è' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            f"/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            reply_markup=keyboard
        )
        return

    # –°–ø–µ—Ü-–∫–Ω–æ–ø–∫–∏
    elif text == "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and is_admin(user_id):
        admin_command(message)
    elif text == "üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" and is_teacher(user_id):
        teacher_command(message)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    elif text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        if is_teacher(user_id):
            teacher_fio = db_get_teacher_fio(user_id)
            today = get_current_day()
            if not today:
                tomorrow = get_tomorrow_day()
                if tomorrow:
                    t = format_teacher_schedule_for_day(teacher_fio, tomorrow)
                    bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{t}")
                else:
                    bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
            else:
                t = format_teacher_schedule_for_day(teacher_fio, today)
                bot.send_message(user_id, t)
            return

        group_name = db_get_group(user_id)
        if not group_name:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
        today = get_current_day()
        if not today:
            tomorrow = get_tomorrow_day()
            if tomorrow:
                schedule_text = format_schedule_for_day(group_name, tomorrow)
                bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{schedule_text}")
            else:
                bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
        else:
            schedule_text = format_schedule_for_day(group_name, today)
            bot.send_message(user_id, schedule_text)

    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        settings_command(message)

    elif text in ["üìÖ –ü–ù", "üìÖ –í–¢", "üìÖ –°–†", "üìÖ –ß–¢", "üìÖ –ü–¢", "üìÖ –°–ë"]:
        day_map = {
            "üìÖ –ü–ù": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "üìÖ –í–¢": "–í—Ç–æ—Ä–Ω–∏–∫",
            "üìÖ –°–†": "–°—Ä–µ–¥–∞",
            "üìÖ –ß–¢": "–ß–µ—Ç–≤–µ—Ä–≥",
            "üìÖ –ü–¢": "–ü—è—Ç–Ω–∏—Ü–∞",
            "üìÖ –°–ë": "–°—É–±–±–æ—Ç–∞"
        }
        day = day_map[text]

        if is_teacher(user_id):
            teacher_fio = db_get_teacher_fio(user_id)
            t = format_teacher_schedule_for_day(teacher_fio, day)
            bot.send_message(user_id, t)
            return

        group_name = db_get_group(user_id)
        if not group_name:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
        schedule_text = format_schedule_for_day(group_name, day)
        bot.send_message(user_id, schedule_text)

    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        group_name = db_get_group(user_id)
        if group_name:
            keyboard = create_main_keyboard(user_id)
            bot.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
        else:
            bot.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")

    else:
        bot.send_message(
            user_id,
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )

# =================== –ê–í–¢–û-–û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø ===================

def check_schedule_updates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å"""
    global student_schedules
    while True:
        if os.path.exists(SCHEDULE_FILE):
            try:
                new_schedule = parse_schedule_from_docx(SCHEDULE_FILE)
                if new_schedule and new_schedule != student_schedules:
                    student_schedules = new_schedule
                    load_group_shifts()
                    global teacher_schedules
                    teacher_schedules = create_teacher_schedules(student_schedules)
                    print("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                    rows = db_list_last_users(1000)
                    for uid, _, grp in rows:
                        try:
                            bot.send_message(
                                uid,
                                "üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
                            )
                        except:
                            pass
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        time.sleep(3600)

update_thread = threading.Thread(target=check_schedule_updates, daemon=True)
update_thread.start()

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
print(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMINS}")

while True:
    try:
        bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
