import os
import re
import io
import json
import time
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional
from apscheduler.schedulers.background import BackgroundScheduler
import requests, json
from requests.adapters import HTTPAdapter, Retry
import telebot
from telebot import types
import traceback

pending_uploads = {}  # user_id ‚Üí {"docx": bytes, "json": bytes}

def log_error(context: str, e: Exception):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–Ω—è—Ç–Ω—ã–π –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print(f"\n[‚ùå {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –û—à–∏–±–∫–∞ –≤ {context}:")
    print(f"–¢–∏–ø: {type(e).__name__}")
    print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {e}")
    tb = traceback.format_exc(limit=2)
    print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {tb}\n")

#8253140899:AAFPdH80KTgoKRAUTyuqBJhrs_DLIkw9zto 172.17.0.1

# ============================ –ö–û–ù–§–ò–ì ============================
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
BOT_TOKEN = os.getenv("BOT_TOKEN", "8253140899:AAFPdH80KTgoKRAUTyuqBJhrs_DLIkw9zto")
API_URL = os.getenv("API_URL", "http://172.17.0.1:3020")

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ROLES = {
    'student': 'üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç',
    'teacher': 'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
    'admin':   'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
}

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (user_id)
ADMINS = [1044229010, 965614231]

# –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# ============================ HTTP –°–ï–°–°–ò–Ø ============================
session = requests.Session()
retries = Retry(total=3, backoff_factor=0.3, status_forcelist=[429, 500, 502, 503, 504])
session.mount("http://", HTTPAdapter(max_retries=retries))
session.mount("https://", HTTPAdapter(max_retries=retries))

def _get(url, **kwargs):
    return session.get(url, timeout=15, **kwargs)

def _post(url, **kwargs):
    return session.post(url, timeout=30, **kwargs)

def _put(url, **kwargs):
    return session.put(url, timeout=30, **kwargs)

# ============================ API ============================

def api_get_user(user_id: int) -> Optional[Dict[str, Any]]:
    try:
        r = _get(f"{API_URL}/users/{user_id}")
        if r.status_code == 200:
            return r.json()
        print(f"[WARN] GET /users/{user_id} ‚Üí {r.status_code}: {r.text[:200]}")
        return None
    except Exception as e:
        log_error(f"api_get_user({user_id})", e)
        return None

def api_create_user(user_id: int, role: str = "student", username: str = "") -> Optional[Dict[str, Any]]:
    payload = {"user_id": user_id, "role": role, "username": username}
    try:
        r = _post(f"{API_URL}/users/", json=payload)
        if r.status_code == 200:
            return r.json()
        print(f"[WARN] POST /users ‚Üí {r.status_code}: {r.text[:200]}")
        return None
    except Exception as e:
        log_error(f"api_create_user({user_id})", e)
        return None

def api_update_user(user_id: int, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    try:
        r = _put(f"{API_URL}/users/{user_id}", json=data)
        if r.status_code == 200:
            return r.json()
        print(f"[WARN] PUT /users/{user_id} ‚Üí {r.status_code}: {r.text[:200]}")
        return None
    except Exception as e:
        log_error(f"api_update_user({user_id})", e)
        return None

def api_get_users() -> List[Dict[str, Any]]:
    try:
        r = _get(f"{API_URL}/users/")
        if r.status_code == 200:
            return r.json()
        print(f"[WARN] GET /users ‚Üí {r.status_code}: {r.text[:200]}")
        return []
    except Exception as e:
        log_error("api_get_users()", e)
        return []
    
                                                # === API: users —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ===
def api_get_users_page(skip: int = 0, limit: int = 10) -> List[Dict[str, Any]]:
    try:
        r = _get(f"{API_URL}/users/", params={"skip": skip, "limit": limit})
        if r.status_code == 200:
            return r.json()
        print(f"[WARN] GET /users?skip={skip}&limit={limit} ‚Üí {r.status_code}: {r.text[:200]}")
        return []
    except Exception as e:
        log_error(f"api_get_users_page(skip={skip}, limit={limit})", e)
        return []

                                                # ¬´–ø–æ–¥–≥–ª—è–¥—ã–≤–∞–µ–º¬ª –Ω–∞ 1 –∑–∞–ø–∏—Å—å –≤–ø–µ—Ä—ë–¥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def api_get_users_page_peek(skip: int = 0, limit: int = 10) -> tuple[List[Dict[str, Any]], bool]:
    rows = api_get_users_page(skip=skip, limit=limit + 1)
    has_next = len(rows) > limit
    return rows[:limit], has_next

def api_get_all_groups() -> List[str]:
    try:
        r = _get(f"{API_URL}/schedule/")
        if r.status_code != 200:
            return []
        arr = r.json()
        groups: List[str] = []
        for item in arr:
            if isinstance(item, dict) and "group_name" in item:
                groups.append(item["group_name"])
            elif isinstance(item, str):
                groups.append(item)
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
        def key_fn(g: str):
            m = re.match(r"(\d+)", g)
            course = int(m.group(1)) if m else 0
            m2 = re.match(r"\d+\s*([–ê-–Ø–∞-—èA-Za-z]*)", g)
            suf = m2.group(1) if m2 else g
            return (course, suf)
        return sorted(list(dict.fromkeys(groups)), key=key_fn)
    except:
        return []

def api_get_schedule(group_name: str) -> Optional[Dict[str, Any]]:
    try:
        r = _get(f"{API_URL}/schedule/{group_name}")
        if r.status_code == 200:
            return r.json()
        print(f"[WARN] GET /schedule/{group_name} ‚Üí {r.status_code}: {r.text[:200]}")
        return None
    except Exception as e:
        log_error(f"api_get_schedule({group_name})", e)
        return None
    
def api_get_teacher_schedule(fio_key: str) -> Optional[Dict[str, Any]]:
    try:
        r = _get(f"{API_URL}/schedule/teacher/{fio_key}")
        if r.status_code == 200:
            return r.json()
        print(f"[WARN] GET /schedule/teacher/{fio_key} ‚Üí {r.status_code}: {r.text[:200]}")
        return None
    except Exception as e:
        log_error(f"api_get_schedule({fio_key})", e)
        return None

def api_upload_schedule(docx_bytes: bytes, json_bytes: bytes | None = None):
    files = {
        "schedule_file": ("schedule.docx", docx_bytes, "application/vnd.openxmlformats-officedocument.wordprocessingml.document"),
    }
    if json_bytes:
        files["shifts_file"] = ("group_shifts.json", json_bytes, "application/json")

    try:
        resp = _post(f"{API_URL}/schedule/upload", files=files)
        if resp.status_code == 200:
            return resp.json()
        else:
            print("–û—à–∏–±–∫–∞:", resp.text)
            return None
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
        return None
    
def check_api_connection():
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {API_URL}")
        r = _get(f"{API_URL}/users/")
        if r.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            print(f"‚ö†Ô∏è API –æ—Ç–≤–µ—Ç–∏–ª–æ —Å –∫–æ–¥–æ–º {r.status_code}: {r.text[:100]}")
    except Exception as e:
        log_error("check_api_connection()", e)
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å URL –∏ —Å–µ—Ä–≤–µ—Ä.")

# ====================== –§–ò–û: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ======================
FIO_FULL_RE = re.compile(
    r'^[–ê-–Ø–Å][–∞-—è—ë]+(?:-[–ê-–Ø–Å][–∞-—è—ë]+)?\s+[–ê-–Ø–Å][–∞-—è—ë]+(?:-[–ê-–Ø–Å][–∞-—è—ë]+)?\s+[–ê-–Ø–Å][–∞-—è—ë]+(?:-[–ê-–Ø–Å][–∞-—è—ë]+)?$'
)

def _cap(part: str) -> str:
    return "-".join(s[:1].upper() + s[1:].lower() for s in part.split("-"))

def normalize_full_fio(text: str) -> str:
    text = re.sub(r'\s+', ' ', text.strip())
    parts = text.split(" ")
    if len(parts) != 3:
        return text
    return " ".join(_cap(p) for p in parts)

def is_valid_full_fio(text: str) -> bool:
    text = re.sub(r'\s+', ' ', text.strip())
    return bool(FIO_FULL_RE.match(text))

def fio_full_to_initials(full_fio: str) -> str:
    def init(n: str) -> str:
        return (n[:1].upper() + ".") if n else ""
    parts = re.sub(r'\s+', ' ', full_fio.strip()).split(' ')
    if len(parts) < 2:
        return full_fio.strip()
    fam = parts[0]
    name = parts[1] if len(parts) > 1 else ""
    otch = parts[2] if len(parts) > 2 else ""
    fam = "-".join(s[:1].upper() + s[1:].lower() for s in fam.split("-"))
    return f"{fam} {init(name)}{init(otch)}"

# ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======================

def get_user_role(user_id: int) -> str:
    user = api_get_user(user_id)
    role = (user or {}).get('role', 'student')
    # –ü–æ–Ω–∏–∂–∞–µ–º/–ø–æ–≤—ã—à–∞–µ–º —Ä–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤ ADMINS
    if user_id in ADMINS and role != 'admin':
        api_update_user(user_id, {"role": "admin"})
        role = 'admin'
    return role

def is_admin(user_id: int) -> bool:
    return get_user_role(user_id) == 'admin'

def is_teacher(user_id: int) -> bool:
    return get_user_role(user_id) in ['teacher', 'admin']

# ====================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø ======================

def format_schedule_for_day(group_name: str, schedule_doc: Dict[str, Any], day: str) -> str:
    if not schedule_doc:
        return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    schedule = schedule_doc.get('schedule', {})
    zero_lesson = (schedule.get('zero_lesson') or {}).get(day, {})
    day_lessons = (schedule.get('days') or {}).get(day, {})
    if not zero_lesson and not day_lessons:
        return f"üìÖ –í {day} –ø–∞—Ä –Ω–µ—Ç"
    result = f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} ({group_name}):\n\n"
    lessons_today: List[str] = []
    if zero_lesson:
        subject = zero_lesson.get('subject', '')
        classroom = zero_lesson.get('classroom', '')
        teacher = zero_lesson.get('teacher', '')
        if subject:
            lesson_text = f"0. {subject}"
            if classroom:
                lesson_text += f" {classroom} –∫–∞–±."
            if teacher:
                lesson_text += f" ({teacher})"
            lessons_today.append(lesson_text)
    for lesson_num, lesson_info in sorted((day_lessons or {}).items(), key=lambda x: int(x[0])):
        subject = lesson_info.get('subject', '')
        classroom = lesson_info.get('classroom', '')
        teacher = lesson_info.get('teacher', '')
        if subject:
            lesson_text = f"{lesson_num}. {subject}"
            if classroom:
                lesson_text += f" {classroom} –∫–∞–±."
            if teacher:
                lesson_text += f" ({teacher})"
            lessons_today.append(lesson_text)
    if not lessons_today:
        return f"üìÖ –í {day} –ø–∞—Ä –Ω–µ—Ç"
    result += "\n".join(lessons_today)
    return result


def format_teacher_schedule_for_day(teacher_full_fio: str, schedule_doc: Dict[str, Any], day: str) -> str:
    if not teacher_full_fio:
        return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
    if not schedule_doc or 'schedule' not in schedule_doc:
        return f"üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {teacher_full_fio} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    schedule = schedule_doc.get('schedule', {})
    first_shift = []
    second_shift = []

    for shift_name, shift_dict in schedule.items():
        day_dict = shift_dict.get(day, {})
        for num, info in sorted(day_dict.items(), key=lambda x: int(x[0])):
            subject = info.get('subject', '')
            group = info.get('group', '')
            room = info.get('classroom', '')
            line = f"‚Ä¢ {num}. {subject}"
            if group:
                line += f" ‚Äî {group}"
            if room:
                line += f" ({room})"
            if shift_name == 'first_shift':
                first_shift.append(line)
            else:
                second_shift.append(line)

    if not first_shift and not second_shift:
        return f"üìÖ –í {day} –ø–∞—Ä –Ω–µ—Ç"

    parts = [f"üë®‚Äçüè´ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ {day}\n{teacher_full_fio}"]
    if first_shift:
        parts.append("1 –°–º–µ–Ω–∞:\n" + "\n".join(first_shift))
    if second_shift:
        parts.append("2 –°–º–µ–Ω–∞:\n" + "\n".join(second_shift))

    return "\n\n".join(parts)

# ====================== –î–ù–ò –ù–ï–î–ï–õ–ò ======================

def get_current_day() -> Optional[str]:
    today = datetime.now().weekday()
    if today == 6:
        return None
    return days_ru[today]

def get_tomorrow_day() -> Optional[str]:
    tomorrow = (datetime.now() + timedelta(days=1)).weekday()
    if tomorrow == 6:
        return None
    return days_ru[tomorrow]

# ====================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======================

def create_main_keyboard(user_id: int) -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    keyboard.add(types.KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è"), types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    keyboard.add(types.KeyboardButton("üìÖ –ü–ù"), types.KeyboardButton("üìÖ –í–¢"), types.KeyboardButton("üìÖ –°–†"))
    keyboard.add(types.KeyboardButton("üìÖ –ß–¢"), types.KeyboardButton("üìÖ –ü–¢"), types.KeyboardButton("üìÖ –°–ë"))
    if is_teacher(user_id):
        keyboard.add(types.KeyboardButton("üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"))
    if is_admin(user_id):
        keyboard.add(types.KeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    return keyboard

# ====================== –†–ï–ù–î–ï–† –≠–ö–†–ê–ù–û–í ======================

def send_group_selection(user_id: int):
    groups = api_get_all_groups()
    if not groups:
        bot.send_message(user_id, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if is_admin(user_id):
        keyboard.add(types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    for i in range(0, len(groups), 2):
        row = groups[i:i+2]
        keyboard.add(*[types.KeyboardButton(group) for group in row])
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –°–∞–ª–∞–≤–∞—Ç—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞\n\n"
    if is_admin(user_id):
        welcome_text += "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'\n\n"
    elif is_teacher(user_id):
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
    else:
        welcome_text += "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"

    bot.send_message(user_id, welcome_text, reply_markup=keyboard)


def render_settings_panel(user_id: int, message_id: Optional[int] = None):
    user = api_get_user(user_id) or {}
    user_role = user.get('role', 'student')
    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"))

    enabled = bool(user.get('schedule_enabled', False))
    sched_time = user.get('schedule_time', '08:00')
    if enabled:
        keyboard.add(types.InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="disable_schedule"))
    else:
        keyboard.add(types.InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="enable_schedule"))
    keyboard.add(types.InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="change_time"))

    if is_teacher(user_id):
        keyboard.add(types.InlineKeyboardButton("üë®‚Äçüè´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="teacher_settings"))

    # –¢–µ–∫—Å—Ç
    current_group = user.get('group_name') or "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
    schedule_status = "–≤–∫–ª—é—á–µ–Ω–∞" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
    teacher_info = ""
    teacher_fio = user.get('teacher_fio')
    if is_teacher(user_id) and teacher_fio:
        teacher_info = f"üë®‚Äçüè´ –§–ò–û: {teacher_fio}\n"

    text = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ | {ROLES.get(user_role, user_role)}\n\n"
        f"{teacher_info}"
        f"üìö –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {current_group}\n"
        f"üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {schedule_status}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {sched_time}"
    )

    if message_id is not None:
        bot.edit_message_text(text, user_id, message_id, reply_markup=keyboard)
    else:
        bot.send_message(user_id, text, reply_markup=keyboard)


def render_admin_panel(chat_id: int, message_id: Optional[int] = None):
    text = "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"))
    kb.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    kb.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_refresh"))
    if message_id:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=kb)
    else:
        bot.send_message(chat_id, text, reply_markup=kb)


def render_teacher_panel(user_id: int, message_id: Optional[int] = None):
    text = "üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üìö –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è", callback_data="teacher_lessons"))
    kb.add(types.InlineKeyboardButton("üë• –ú–æ–∏ –≥—Ä—É–ø–ø—ã", callback_data="teacher_groups"))
    if is_admin(user_id):
        kb.add(types.InlineKeyboardButton("üëë –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    if message_id:
        bot.edit_message_text(text, user_id, message_id, reply_markup=kb)
    else:
        bot.send_message(user_id, text, reply_markup=kb)

# ======================== –•–≠–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î ========================

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = int(message.from_user.id)
    user = api_get_user(user_id)
    username = message.from_user.username or ""
    if user and user.get("username") != username:
        api_update_user(user_id, {"username": username})

    # —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not user:
        # –∞–≤—Ç–æ-—Ä–æ–ª—å admin –∏–∑ —Å–ø–∏—Å–∫–∞ ADMINS
        role = 'admin' if user_id in ADMINS else 'student'
        username = message.from_user.username or ""
        user = api_create_user(user_id, role=role, username=username)

    if not user:
        bot.send_message(user_id, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    if user_id in ADMINS and user.get('role') != 'admin':
        user = api_update_user(user_id, {"role": "admin"}) or user

    user_role = user.get('role', 'student')
    teacher_fio = user.get('teacher_fio')

    # –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (–∏–ª–∏ –∞–¥–º–∏–Ω) –∏ –§–ò–û –µ—â–µ –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –§–ò–û
    if user_role in ('teacher', 'admin') and not teacher_fio:
        msg = bot.send_message(
            user_id,
            "üë®‚Äçüè´ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_teacher_name)
        return

    # –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –§–ò–û —É–∂–µ –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user_role in ('teacher', 'admin') and teacher_fio:
        api_update_user(user_id, {"group_name": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"})
        keyboard = create_main_keyboard(user_id)
        bot.send_message(
            user_id,
            f"üë®‚Äçüè´ *–ú—ã –≤–∞—Å –≤—Å–µ –µ—â–µ –ø–æ–º–Ω–∏–º, {teacher_fio}!*\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        return

    # –ò–Ω–∞—á–µ ‚Äî —Å—Ç—É–¥–µ–Ω—Ç/–Ω–µ–ø—Ä–µ–ø–æ–¥: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞)
    if not user.get('group_name'):
        send_group_selection(user_id)
        return

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = create_main_keyboard(user_id)
    bot.send_message(
        user_id,
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –°–∞–ª–∞–≤–∞—Ç—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞\n\n"
        f"üìö –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {user.get('group_name')}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
        reply_markup=keyboard
    )

@bot.message_handler(commands=['schedule'])
def schedule_command(message):
    user_id = int(message.from_user.id)
    user = api_get_user(user_id) or {}

    if is_teacher(user_id):
        teacher_fio = user.get('teacher_fio')
        # –∫–ª—é—á –¥–ª—è API: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã (–§–∞–º–∏–ª–∏—è –ò.–û.)
        fio_key = fio_full_to_initials(teacher_fio or '')
        today = get_current_day()
        if not today:
            tomorrow = get_tomorrow_day()
            if tomorrow:
                sch = api_get_teacher_schedule(fio_key)
                text = format_teacher_schedule_for_day(teacher_fio or '', sch or {}, tomorrow)
                bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{text}")
            else:
                bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
        else:
            sch = api_get_teacher_schedule(fio_key)
            text = format_teacher_schedule_for_day(teacher_fio or '', sch or {}, today)
            bot.send_message(user_id, text)
        return

    # —Å—Ç—É–¥–µ–Ω—Ç/–æ–±—ã—á–Ω—ã–π ‚Äî –∫–∞–∫ –±—ã–ª–æ
    group_name = user.get('group_name')
    if not group_name:
        bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    today = get_current_day()
    if not today:
        tomorrow = get_tomorrow_day()
        if tomorrow:
            sch = api_get_schedule(group_name)
            schedule_text = format_schedule_for_day(group_name, sch or {}, tomorrow)
            bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{schedule_text}")
        else:
            bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
    else:
        sch = api_get_schedule(group_name)
        schedule_text = format_schedule_for_day(group_name, sch or {}, today)
        bot.send_message(user_id, schedule_text)

@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = int(message.from_user.id)
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    render_admin_panel(user_id)

@bot.message_handler(commands=['teacher'])
def teacher_command(message):
    user_id = int(message.from_user.id)
    if not is_teacher(user_id):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    render_teacher_panel(user_id)

@bot.message_handler(commands=['settings'])
def settings_command(message):
    render_settings_panel(message.from_user.id)

# ================== CALLBACK'–∏ –ê–î–ú–ò–ù–ê –ò –ü–†–ï–ü–û–î–ê ==================

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def admin_callback_handler(call):
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ---
    if call.data.startswith("admin_users"):
        # –æ—Ç–≤–µ—Ç–∏–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å "query is too old"
        try: bot.answer_callback_query(call.id)
        except: pass

        parts = call.data.split(":")
        skip = int(parts[1]) if len(parts) > 1 else 0
        limit = int(parts[2]) if len(parts) > 2 else 10
        show_user_management(call, skip=skip, limit=limit)
        return

    if call.data == "admin_users":
        show_user_management(call)
        bot.answer_callback_query(call.id)
    elif call.data == "admin_stats":
        show_admin_stats(call)
        bot.answer_callback_query(call.id)
    elif call.data == "admin_refresh":
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ—Ñ—Ä–µ—à: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å DOCX
        bot.answer_callback_query(call.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX-—Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
        bot.send_message(user_id, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX-—Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –°–ª–µ–¥–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Å–æ —Å–º–µ–Ω–∞–º–∏ `group_shifts.json`. –Ø –∑–∞–≥—Ä—É–∂—É –æ–±–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    elif call.data == "admin_panel":
        render_admin_panel(user_id)  # –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
        bot.answer_callback_query(call.id)
    elif call.data == "admin_set_teacher":
        set_teacher_callback(call)
        bot.answer_callback_query(call.id)
    elif call.data == "admin_back":
        render_admin_panel(user_id, message_id=call.message.message_id)
        bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('teacher_'))
def teacher_callback_handler(call):
    user_id = call.from_user.id
    if not is_teacher(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    # === –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è ===
    if call.data == "teacher_lessons":
        try:
            bot.clear_step_handler_by_chat_id(call.from_user.id)
        except Exception:
            pass
        user = api_get_user(user_id) or {}
        teacher_fio = user.get("teacher_fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        fio_key = fio_full_to_initials(teacher_fio)
        today = get_current_day()

        if not today:
            bot.answer_callback_query(call.id)
            bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        sch = api_get_teacher_schedule(fio_key) or {}
        schedule = sch.get("schedule", {})

        # –°–æ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ –æ–±–µ–∏—Ö —Å–º–µ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
        groups = set()
        for shift_name, shift_data in schedule.items():
            day_lessons = shift_data.get(today, {})
            for num, info in day_lessons.items():
                group = info.get("group")
                if group:
                    groups.add(group)

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥—Ä—É–ø–ø
        kb = types.InlineKeyboardMarkup(row_width=2)
        if groups:
            for g in sorted(groups):
                kb.add(types.InlineKeyboardButton(g, callback_data=f"teacher_sendtask_{g}"))
            kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="teacher_back"))

            bot.edit_message_text(
                f"üë®‚Äçüè´ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è\n\n"
                f"{teacher_fio}, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è:",
                user_id,
                call.message.message_id,
                reply_markup=kb
            )
        else:
            kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="teacher_back"))
            bot.edit_message_text(
                f"üë®‚Äçüè´ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è\n\n"
                f"{teacher_fio}, —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è ({today}) –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.",
                user_id,
                call.message.message_id,
                reply_markup=kb
            )

        bot.answer_callback_query(call.id)
        return

    # === –ú–æ–∏ –≥—Ä—É–ø–ø—ã ===
    elif call.data == "teacher_groups":
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="teacher_back"))
        bot.edit_message_text(
            "üë• –ú–æ–∏ –≥—Ä—É–ø–ø—ã\n\n"
            "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø...",
            user_id,
            call.message.message_id,
            reply_markup=kb
        )
        bot.answer_callback_query(call.id)
        return

    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ===
    elif call.data == "teacher_settings":
        show_teacher_settings(call)
        bot.answer_callback_query(call.id)
        return
    
    elif call.data == "teacher_change_fio":
        try:
            bot.clear_step_handler_by_chat_id(user_id)
        except Exception:
            pass
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back"))
        msg = bot.send_message(
            user_id,
            "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
            reply_markup=kb
        )
        bot.register_next_step_handler(msg, process_teacher_fio_change)
        bot.answer_callback_query(call.id)
        return

    # === –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ===
    elif call.data == "teacher_back":
        render_teacher_panel(user_id, message_id=call.message.message_id)
        bot.answer_callback_query(call.id)
        return

    # === –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è ===
    elif call.data.startswith("teacher_sendtask_"):
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="teacher_lessons")) 
        group = call.data.replace("teacher_sendtask_", "")
        msg = bot.send_message(
            user_id,
            f"üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º –¥–ª—è –≥—Ä—É–ø–ø—ã *{group}* (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –∞—Ä—Ö–∏–≤ –∏ —Ç.–ø.):",
            parse_mode="Markdown",
            reply_markup=kb
        )
        bot.register_next_step_handler(msg, lambda m: process_teacher_task_file(m, group))
        bot.answer_callback_query(call.id)
        return

# ============== CALLBACK'–∏ –ù–ê–°–¢–†–û–ï–ö –†–ê–°–°–´–õ–ö–ò/–ì–†–£–ü–ü–´ ==============

@bot.callback_query_handler(func=lambda call: call.data in ("change_group", "enable_schedule", "disable_schedule", "change_time"))
def settings_callbacks(call):
    user_id = int(call.from_user.id)
    data = call.data

    if data == "change_group":
        send_group_selection(user_id)
        bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ")
        return

    if data == "enable_schedule":
        api_update_user(user_id, {"schedule_enabled": True})
        bot.answer_callback_query(call.id, "üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
        settings_command(call.message)
        return

    if data == "disable_schedule":
        api_update_user(user_id, {"schedule_enabled": False})
        bot.answer_callback_query(call.id, "üîï –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        settings_command(call.message)
        return

    if data == "change_time":
        msg = bot.send_message(user_id, "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00):")
        bot.register_next_step_handler(msg, process_change_time)
        return

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –≠–ö–†–ê–ù–´ (–ê–î–ú–ò–ù/–ü–†–ï–ü–û–î) ==================

def build_admin_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"))
    kb.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    kb.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_refresh"))
    return kb

def show_user_management(call, skip: int = 0, limit: int = 10):
    user_id = call.from_user.id
    message_id = call.message.message_id

    skip = max(0, int(skip))
    limit = max(1, int(limit))

    rows, has_next = api_get_users_page_peek(skip=skip, limit=limit)
    if not rows and skip > 0:
        skip = max(0, skip - limit)
        rows, has_next = api_get_users_page_peek(skip=skip, limit=limit)

    users_info = []
    for u in rows:
        uid = u.get('user_id')
        uname = u.get('username')
        role = u.get('role', 'student')
        grp = u.get('group_name') or '–Ω–µ—Ç –≥—Ä—É–ø–ø—ã'
        line = f"@{uname}, {uid}: {ROLES.get(role, role)}"
        if role == 'student':
            line += f", –≥—Ä—É–ø–ø–∞: {grp}"
        fio = u.get('teacher_fio')
        if fio:
            line += f", –§–ò–û: {fio}"
        users_info.append(line)

    page_num = skip // limit + 1
    users_text = "\n".join(users_info) if users_info else "‚Äî"

    text = (
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_num}\n"
        f"–ü–æ–∫–∞–∑–∞–Ω–æ: {len(rows)}\n\n"
        f"{users_text}"
    )

    kb = types.InlineKeyboardMarkup(row_width=3)
    has_prev = skip > 0
    nav_buttons = []

    if has_prev:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"admin_users:{skip - limit}:{limit}"))
    if has_next:
        nav_buttons.append(types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"admin_users:{skip + limit}:{limit}"))
    
    if nav_buttons:
        kb.add(*nav_buttons)

    kb.add(types.InlineKeyboardButton("üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="admin_set_teacher"))

    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))

    try:
        bot.edit_message_text(text, user_id, message_id, reply_markup=kb)
    except Exception as e:
        if "message is not modified" not in str(e):
            raise

# def show_user_management(call):
#     user_id = call.from_user.id
#     message_id = call.message.message_id

#     rows = list(reversed(api_get_users()))[:10]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ id
#     users_info = []
#     for u in rows:
#         uid = u.get('user_id')
#         uname = u.get('username')
#         role = u.get('role', 'student')
#         grp = u.get('group_name') or '–Ω–µ—Ç –≥—Ä—É–ø–ø—ã'
#         info = f"@{uname}, {uid}: {ROLES.get(role, role)}, –≥—Ä—É–ø–ø–∞: {grp}"
#         fio = u.get('teacher_fio')
#         if fio:
#             info += f", –§–ò–û: {fio}"
#         users_info.append(info)

#     users_text = "\n".join(users_info) if users_info else "‚Äî"
#     keyboard = types.InlineKeyboardMarkup()
#     keyboard.add(types.InlineKeyboardButton("üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="admin_set_teacher"))
#     keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))

#     total = len(api_get_users())
#     bot.edit_message_text(
#         f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
#         f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}!\n"
#         f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_text}",
#         user_id, message_id, reply_markup=keyboard
#     )

def show_admin_stats(call):
    user_id = call.from_user.id
    message_id = call.message.message_id

    users = api_get_users()
    total = len(users)
    students = sum(1 for u in users if u.get('role') == 'student')
    teachers = sum(1 for u in users if u.get('role') == 'teacher')
    admins = sum(1 for u in users if u.get('role') == 'admin')
    groups = len({u.get('group_name') for u in users if u.get('group_name')})
    subs = sum(1 for u in users if u.get('schedule_enabled'))

    stats_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
                  f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
                  f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {students}\n"
                  f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {teachers}\n"
                  f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins}\n"
                  f"üìö –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {groups}\n"
                  f"üîî –ü–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {subs}")
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
    bot.edit_message_text(stats_text, user_id, message_id, reply_markup=keyboard)


def show_teacher_settings(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    teacher_fio = (api_get_user(user_id) or {}).get('teacher_fio') or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="teacher_change_fio"))
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back"))
    bot.edit_message_text(
        f"üë®‚Äçüè´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
        f"–¢–µ–∫—É—â–µ–µ –§–ò–û: {teacher_fio}",
        user_id, message_id, reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data == "settings_back")
def settings_back_handler(call):
    user_id = call.from_user.id
    render_settings_panel(user_id, message_id=call.message.message_id)
    bot.answer_callback_query(call.id)

# =========== –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ /users) ===========

@bot.callback_query_handler(func=lambda call: call.data == "admin_set_teacher")
def set_teacher_callback(call):
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    msg = bot.send_message(
        user_id,
        "üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª."
    )
    bot.register_next_step_handler(msg, process_teacher_appointment)


def process_teacher_appointment(message):
    admin_id = message.from_user.id
    text = message.text.strip()

    if not is_admin(admin_id):
        bot.send_message(admin_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return

    if text.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "–Ω–∞–∑–∞–¥"):
        bot.send_message(admin_id, "‚õîÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        render_admin_panel(admin_id)
        return

    raw_ids = re.split(r'[\,\s]+', text)
    ok, fail = [], []

    for token in raw_ids:
        if not token:
            continue
        try:
            uid = int(token)
            updated = api_update_user(uid, {"role": "teacher"})
            if updated:
                ok.append(uid)
                try:
                    bot.send_message(
                        uid,
                        "üéâ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è!\n"
                        "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    )
                except:
                    pass
            else:
                fail.append(token)
        except:
            fail.append(token)

    if ok:
        bot.send_message(admin_id, f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏: {', '.join(map(str, ok))}")
    if fail:
        bot.send_message(admin_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {', '.join(fail)}")

    render_admin_panel(admin_id)

# ================== –ü–†–û–¶–ï–°–°–ò–ù–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô –§–ò–û ==================

def process_teacher_name(message):
    user_id = int(message.from_user.id)
    teacher_fio_raw = message.text.strip()
    teacher_fio = normalize_full_fio(teacher_fio_raw)

    if not is_valid_full_fio(teacher_fio):
        msg = bot.send_message(
            user_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é: *–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ*.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –°–∏–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞, –ü–µ—Ç—Ä–æ–≤-–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_teacher_name)
        return

    api_update_user(user_id, {"teacher_fio": teacher_fio, "group_name": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"})

    keyboard = create_main_keyboard(user_id)
    bot.send_message(
        user_id,
        f"‚úÖ *{teacher_fio}*, –º—ã –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª–∏!\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø\n"
        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def process_teacher_fio_change(message):
    user_id = int(message.from_user.id)
    new_fio_raw = message.text.strip()
    new_fio = normalize_full_fio(new_fio_raw)

    if not is_valid_full_fio(new_fio):
        msg = bot.send_message(
            user_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é: *–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ*.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –°–∏–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_teacher_fio_change)
        return

    api_update_user(user_id, {"teacher_fio": new_fio})
    bot.send_message(user_id, f"‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: *{new_fio}*", parse_mode='Markdown')

# ================== –ò–ó–ú–ï–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –†–ê–°–°–´–õ–ö–ò ==================

def process_change_time(message):
    user_id = int(message.from_user.id)
    text = message.text.strip()
    if not re.match(r'^\d{2}:\d{2}$', text):
        msg = bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:00.")
        bot.register_next_step_handler(msg, process_change_time)
        return
    hh, mm = text.split(':')
    try:
        hh_i, mm_i = int(hh), int(mm)
        if not (0 <= hh_i < 24 and 0 <= mm_i < 60):
            raise ValueError
    except:
        msg = bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:00.")
        bot.register_next_step_handler(msg, process_change_time)
        return
    api_update_user(user_id, {"schedule_time": text})
    bot.send_message(user_id, f"‚úÖ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {text}")
    render_settings_panel(user_id)

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===================

@bot.message_handler(func=lambda message: True, content_types=['text', 'document'])
def text_message_handler(message):
    user_id = int(message.from_user.id)

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (DOCX/JSON) –∞–¥–º–∏–Ω–æ–º ---
    if message.content_type == 'document':
        user = api_get_user(user_id) or {}
        if user.get('role') != 'admin':
            bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.")
            return
        file_info = bot.get_file(message.document.file_id)
        file_bytes = bot.download_file(file_info.file_path)
        fname = (message.document.file_name or '').lower()

        if user_id not in pending_uploads:
            pending_uploads[user_id] = {}

        # --- JSON —Ñ–∞–π–ª ---
        if fname.endswith('.json'):
            try:
                json.loads(file_bytes.decode('utf-8'))
                pending_uploads[user_id]['json'] = file_bytes

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ DOCX
                if 'docx' in pending_uploads[user_id]:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞"))
                    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                    bot.send_message(
                        user_id,
                        "üìÇ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã!\n–ù–∞–∂–º–∏—Ç–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
                        reply_markup=markup
                    )
                else:
                    bot.send_message(user_id, "‚úÖ JSON –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX.")

            except Exception:
                bot.send_message(user_id, "‚ùå JSON –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        elif fname.endswith('.docx'):
            pending_uploads[user_id]['docx'] = file_bytes

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JSON
            if 'json' in pending_uploads[user_id]:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞"))
                markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                bot.send_message(
                    user_id,
                    "üìÇ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã!\n–ù–∞–∂–º–∏—Ç–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
                    reply_markup=markup
                )
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
                markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                bot.send_message(
                    user_id,
                    "‚úÖ DOCX –ø–æ–ª—É—á–µ–Ω.\n"
                    "(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Å–æ —Å–º–µ–Ω–∞–º–∏, "
                    "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ DOCX.",
                    reply_markup=markup
                )
            return
        
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞, –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É ---
        data = pending_uploads[user_id]
        if 'docx' in data and 'json' in data:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞"))
            markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            bot.send_message(
                user_id,
                "üìÇ –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã!\n–ù–∞–∂–º–∏—Ç–µ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
                reply_markup=markup
            )
        return

    # --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã ---
    text = (message.text or '').strip()
    user_role = get_user_role(user_id)

    # –ê–¥–º–∏–Ω—Å–∫–∞—è ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
    if text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" and is_admin(user_id):
        api_update_user(user_id, {"group_name": "–ê–¥–º–∏–Ω"})
        keyboard = create_main_keyboard(user_id)
        bot.send_message(
            user_id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "üëë –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
            reply_markup=keyboard
        )
        return

    # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    if text in set(api_get_all_groups()):
        if is_teacher(user_id):
            group_name = text
            sch = api_get_schedule(group_name)
            schedule_text = format_schedule_for_day(group_name, sch or {}, get_current_day() or "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
            bot.send_message(user_id, schedule_text)
            return
        # –°—Ç—É–¥–µ–Ω—Ç–∞–º ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É
        api_update_user(user_id, {'role': 'student', 'group_name': text})
        keyboard = create_main_keyboard(user_id)
        role_text = "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç"
        bot.send_message(
            user_id,
            f"‚úÖ –ì—Ä—É–ø–ø–∞ {text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–°–µ–≥–æ–¥–Ω—è' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
            f"/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            reply_markup=keyboard
        )
        return

    # –°–ø–µ—Ü-–∫–Ω–æ–ø–∫–∏
    if text == "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and is_admin(user_id):
        admin_command(message)
        return
    if text == "üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" and is_teacher(user_id):
        teacher_command(message)
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        if is_teacher(user_id):
            teacher_fio = (api_get_user(user_id) or {}).get('teacher_fio')
            today = get_current_day()
            fio_key = fio_full_to_initials(teacher_fio or '')
            if not today:
                tomorrow = get_tomorrow_day()
                if tomorrow:
                    sch = api_get_teacher_schedule(fio_key)
                    t = format_teacher_schedule_for_day(teacher_fio or '', sch or {}, tomorrow)
                    bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{t}")
                else:
                    bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
            else:
                sch = api_get_teacher_schedule(fio_key)
                t = format_teacher_schedule_for_day(teacher_fio or '', sch or {}, today)
                bot.send_message(user_id, t)
            return
        group_name = (api_get_user(user_id) or {}).get('group_name')
        if not group_name:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
        today = get_current_day()
        if not today:
            tomorrow = get_tomorrow_day()
            if tomorrow:
                sch = api_get_schedule(group_name)
                schedule_text = format_schedule_for_day(group_name, sch or {}, tomorrow)
                bot.send_message(user_id, f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ó–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n{schedule_text}")
            else:
                bot.send_message(user_id, "üéâ –°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π!")
        else:
            sch = api_get_schedule(group_name)
            schedule_text = format_schedule_for_day(group_name, sch or {}, today)
            bot.send_message(user_id, schedule_text)
        return

    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        settings_command(message)
        return

    if text in ["üìÖ –ü–ù", "üìÖ –í–¢", "üìÖ –°–†", "üìÖ –ß–¢", "üìÖ –ü–¢", "üìÖ –°–ë"]:
        day_map = {
            "üìÖ –ü–ù": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "üìÖ –í–¢": "–í—Ç–æ—Ä–Ω–∏–∫",
            "üìÖ –°–†": "–°—Ä–µ–¥–∞",
            "üìÖ –ß–¢": "–ß–µ—Ç–≤–µ—Ä–≥",
            "üìÖ –ü–¢": "–ü—è—Ç–Ω–∏—Ü–∞",
            "üìÖ –°–ë": "–°—É–±–±–æ—Ç–∞"
        }
        day = day_map[text]
        if is_teacher(user_id):
            teacher_fio = (api_get_user(user_id) or {}).get('teacher_fio')
            fio_key = fio_full_to_initials(teacher_fio or '')
            sch = api_get_teacher_schedule(fio_key)
            t = format_teacher_schedule_for_day(teacher_fio or '', sch or {}, day)
            bot.send_message(user_id, t)
            return
        group_name = (api_get_user(user_id) or {}).get('group_name')
        if not group_name:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
        sch = api_get_schedule(group_name)
        schedule_text = format_schedule_for_day(group_name, sch or {}, day)
        bot.send_message(user_id, schedule_text)
        return

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        pending_uploads.pop(user_id, None)
        group_name = (api_get_user(user_id) or {}).get('group_name')
        if group_name:
            keyboard = create_main_keyboard(user_id)
            bot.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
        else:
            bot.send_message(user_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.")
        return
    
    if text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        data = pending_uploads.get(user_id)
        if not data or 'docx' not in data:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX-—Ñ–∞–π–ª.")
            return

        bot.send_message(user_id, "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")

        resp = api_upload_schedule(data['docx'], None)  # JSON –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º
        pending_uploads.pop(user_id, None)

        keyboard = create_main_keyboard(user_id)  # ‚Üê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        if resp is not None:
            bot.send_message(user_id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=keyboard)
            users = api_get_users()
            for u in users:
                try:
                    bot.send_message(u["user_id"], "üì¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ—Ç–µ.")
                except Exception:
                    pass
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=keyboard),
        return
    
    if text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞":
        data = pending_uploads.get(user_id)
        if not data or 'docx' not in data:
            bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ DOCX –∏ JSON —Ñ–∞–π–ª—ã.")
            return

        bot.send_message(user_id, "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")

        resp = api_upload_schedule(data['docx'], data.get('json'))
        pending_uploads.pop(user_id, None)

        keyboard = create_main_keyboard(user_id)  # ‚Üê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        if resp is not None:
            bot.send_message(user_id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=keyboard)

            # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users = api_get_users()
            for u in users:
                uid = u.get("user_id")
                try:
                    bot.send_message(uid, "üì¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
                except Exception:
                    pass
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=keyboard),
        return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–æ—à–ª–∞
    bot.send_message(
        user_id,
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    )

def send_daily_schedule():
    now = datetime.now().strftime("%H:%M")
    users = api_get_users()
    for u in users:
        if not u.get("schedule_enabled"):
            continue
        if u.get("schedule_time") != now:
            continue

        uid = u.get("user_id")
        role = u.get("role")
        try:
            if role in ("teacher", "admin"):
                teacher_fio = u.get("teacher_fio")
                fio_key = fio_full_to_initials(teacher_fio or "")
                today = get_current_day()
                if not today:
                    continue
                sch = api_get_teacher_schedule(fio_key)
                text = format_teacher_schedule_for_day(teacher_fio or "", sch or {}, today)
                bot.send_message(uid, f"üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{text}")
            else:
                group = u.get("group_name")
                if not group:
                    continue
                today = get_current_day()
                if not today:
                    continue
                sch = api_get_schedule(group)
                text = format_schedule_for_day(group, sch or {}, today)
                bot.send_message(uid, f"üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

# ------------------------------- –†–ê–°–°–´–õ–ö–ê –ó–ê–î–ê–ù–ò–Ø –û–¢ –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø ------------------------------ #

@bot.callback_query_handler(func=lambda call: call.data == "teacher_lessons")
def teacher_lessons_handler(call):
    user_id = call.from_user.id
    user = api_get_user(user_id) or {}
    teacher_fio = user.get("teacher_fio")
    fio_key = fio_full_to_initials(teacher_fio or "")
    today = get_current_day()
    sch = api_get_teacher_schedule(fio_key) or {}
    schedule = sch.get("schedule", {})

    # –°–æ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ –æ–±–µ–∏—Ö —Å–º–µ–Ω
    groups = set()
    for shift_name, shift_data in schedule.items():
        day_lessons = shift_data.get(today, {})
        for num, info in day_lessons.items():
            group = info.get("group")
            if group:
                groups.add(group)

    kb = types.InlineKeyboardMarkup(row_width=2)
    for g in sorted(groups):
        kb.add(types.InlineKeyboardButton(g, callback_data=f"teacher_sendtask_{g}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="teacher_back"))

    bot.edit_message_text(
        f"üë®‚Äçüè´ –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è\n\n"
        f"{teacher_fio}, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è:",
        user_id,
        call.message.message_id,
        reply_markup=kb
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("teacher_sendtask_"))
def teacher_send_task_start(call):
    user_id = call.from_user.id
    group = call.data.replace("teacher_sendtask_", "")
    msg = bot.send_message(
        user_id,
        f"üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º –¥–ª—è –≥—Ä—É–ø–ø—ã *{group}* (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –∞—Ä—Ö–∏–≤ –∏ —Ç.–ø.):",
        parse_mode="Markdown"
    )
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    bot.register_next_step_handler(msg, lambda m: process_teacher_task_file(m, group))

def process_teacher_task_file(message, group_name):
    user_id = message.from_user.id
    user = api_get_user(user_id) or {}
    teacher_fio = user.get("teacher_fio", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    if message.content_type not in ["document", "photo"]:
        msg = bot.send_message(user_id, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.")
        bot.register_next_step_handler(msg, lambda m: process_teacher_task_file(m, group_name))
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    users = [u for u in api_get_users() if u.get("group_name") == group_name]
    count_sent = 0

    if message.content_type == "document":
        file_info = bot.get_file(message.document.file_id)
        file_bytes = bot.download_file(file_info.file_path)
        for u in users:
            try:
                bot.send_document(
                    u["user_id"],
                    message.document.file_id,
                    caption=f"üìö –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è *{teacher_fio}* –¥–ª—è –≥—Ä—É–ø–ø—ã *{group_name}*",
                    parse_mode="Markdown"
                )
                count_sent += 1
            except Exception:
                pass
    elif message.content_type == "photo":
        photo_id = message.photo[-1].file_id
        for u in users:
            try:
                bot.send_photo(
                    u["user_id"],
                    photo_id,
                    caption=f"üìö –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è *{teacher_fio}* –¥–ª—è –≥—Ä—É–ø–ø—ã *{group_name}*",
                    parse_mode="Markdown"
                )
                count_sent += 1
            except Exception:
                pass

    bot.send_message(
        user_id,
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count_sent} —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–ø—ã *{group_name}*.",
        parse_mode="Markdown"
    )

# =================== –ó–ê–ü–£–°–ö ===================
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ API:", API_URL)
    print(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMINS}")
    check_api_connection()

    # 1) –°–Ω—è—Ç—å webhook –æ–¥–∏–Ω —Ä–∞–∑
    try:
        bot.remove_webhook()
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –Ω–∏–∂–µ:
        # import requests
        # requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook",
        #              params={"drop_pending_updates": "true"}, timeout=10)
        time.sleep(1)  # –∫—Ä–æ—à–µ—á–Ω–∞—è –ø–∞—É–∑–∞
    except Exception as e:
        print("remove_webhook error:", e)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_daily_schedule, "interval", minutes=1)
    scheduler.start()

    # 2) –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        try:
            bot.polling(
                none_stop=True,
                timeout=60,
                long_polling_timeout=60,
                allowed_updates=["message", "callback_query", "document"],
                # skip_pending=True,  # ‚Üê –≤–∫–ª—é—á–∏—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
